{"version":3,"sources":["Context/Authentication.js","Components/Users/SignInForm.js","Components/Tasks/TaskTable.js","Components/Tasks/TaskDisplay.js","Components/Tasks/CreateTaskForm.js","Components/Navigation/Links.js","Components/Navigation/PrivateRoutes.js","Components/Lists/CreateListForm.js","Components/Users/CreateUserForm.js","Components/Lists/ListTable.js","Components/Lists/ListDisplay.js","Components/SelectList.js","Components/Tasks/EditTask.js","Components/Lists/EditList.js","Components/Navigation/Routes.js","Pages/index.js","Components/Navigation/SignOut.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","isAuthenticated","userLogged","activeList","authenticate","signout","identify","SIForm","state","username","password","touched","attempt","change","e","setState","target","name","value","handleBlur","field","onSubmit","preventDefault","Axios","get","URL","then","res","console","log","data","context","redirect","catch","error","this","Consumer","push","to","errors","length","isEnabled","Object","keys","some","x","showErr","hasError","shouldShow","showValid","maxLength","className","filled","onBlur","placeholder","onChange","type","disabled","onClick","Component","contextType","TaskTable","clickedTasks","clickedButtons","unavailableTasks","id","includes","props","completedTasks","obj","completed","_id","shape","isClicked","onClickCapture","checkClicked","checkComplete","deletable","checkDeletable","description","due","isCompleted","shown","deleteOneTask","editMenu","buttonClicked","TaskDisplay","taskTable","taskCollection","map","i","key","CTForm","task","user","list","post","refreshTasks","componentDidMount","selection","editId","clickedTaskNames","doneDelete","selectedDelete","tasksLoaded","bind","setDoneDelete","splice","indexOf","clicked","patch","delete","names","params","back","pathname","goBack","setSelectedDelete","deleteDoneTasks","deleteSelectedTasks","withRouter","Links","PrivateRoute","children","rest","render","location","from","CLForm","desc","unavailableLists","history","CUForm","email","cpassword","unavailableUsers","unavailableEmails","taken","ListTable","clickedLists","listname","clickHandler","deleteOneList","ListDisplay","listTable","listCollection","SelectList","refreshLists","listsLoaded","redirect2","redirect3","addlist","ETask","EList","Routes","exact","path","EditTask","EditList","SignOut","useContext","App","useState","setAuthenticated","store","Provider","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a175ad7b.chunk.js","sourcesContent":["import React from 'react'\n\nexport const AuthContext = React.createContext({\n    isAuthenticated: false,\n    userLogged: \"none\",\n    activeList: \"none\",\n    authenticate : () => {},\n    signout : () => {},\n    identify : () => {}\n})\n\n","import React from 'react';\nimport '../../form.css'\nimport Axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom'\nimport '../../App';\nimport { AuthContext } from '../../Context/Authentication';\nimport {URL} from '../../App'\n\n//Checks for valid form entries\nfunction validate(username, password) {\n    return {\n        username: username.length === 0,\n        password: password.length === 0,\n    }\n    \n}\n\nexport default class SIForm extends React.Component {\n   \n            state = { \n            username: \"\", \n            password: \"\",\n\n            touched: {\n                username: false, \n                password: false\n            },\n\n            attempt: true\n        }\n\n    //Setting state with field values on  change\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n    };\n\n    //Allowing css to be applied only after a field has been touched\n    handleBlur = (field) => e => {\n        this.setState({\n          touched: { ...this.state.touched, [field]: true },\n        });\n      }\n\n    //Attempt Sign-in\n    onSubmit = e => {\n        e.preventDefault()\n        //Pass in username and password to be checked\n        Axios.get(`${URL}/users-login?username=${this.state.username}&password=${this.state.password}`)\n        .then(res => {\n            console.log(res)\n            //if the username and password matches, set context value authenticated, and redirect\n            if(res.data === true){\n                console.log('Password matches')\n                this.context.authenticate()\n                this.setState({ attempt: true})\n                this.setState({ redirect: true})\n            //if the username and password does not match, display failed login attempt\n            } else {\n                this.setState({\n                    username: \"\", \n                    password: \"\",\n\n                touched: {\n                    username: false, \n                    password: false\n                }\n                })\n                this.setState({ attempt: false})\n                console.log(`Matching Failed ${this.state.password}`)\n            }\n        })\n        .catch(function(error){\n            console.log(error);\n        })\n       \n    }\n\n    render(){\n\n        //Set userLogged context value, and redirect to list selection.\n        if(this.state.redirect){\n            console.log('login successful')\n            return(\n            <AuthContext.Consumer>\n            {({identify}) => (\n                <Redirect push={identify(this.state.username, this.context.state.activeList)} to={'/Select'}/>\n            )}\n            </AuthContext.Consumer>\n            )\n            }\n    \n        //Checks if each field has valid entries\n        var errors = validate(this.state.username, this.state.password);        \n        const isEnabled = !Object.keys(errors).some(x => errors[x]);\n        \n        //Checks if error css should be shown\n        const showErr = (field) => {\n            const hasError = errors[field];\n            const shouldShow = this.state.touched[field];\n      \n            return hasError ? shouldShow : false;\n          };\n\n        //Checks if good css should be shown\n        const showValid = (field) => {\n        const shouldShow = this.state.touched[field];\n\n        return shouldShow ? true : false\n        \n        };\n\n          \n        return (\n            <div>\n            <form>\n                <h3>Sign-In</h3>\n                <input \n                name=\"username\" \n                maxLength={20}\n                className={showErr('username') ? \"error\" : \"\"}\n                filled={showValid('username') ? \"good\" : \"\"}\n                onBlur={this.handleBlur('username')}\n                placeholder=\"Username\"\n                value={this.state.username} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={showErr('username') ? \"shown-messages\" : \"hidden-messages\"}>Enter Username</p>\n                <br/>\n                <input \n                name=\"password\"\n                maxLength={30}\n                className={showErr('password') ? \"error\" : \"\"}\n                filled={showValid('password') ? \"good\" : \"\"}\n                onBlur={this.handleBlur('password')}\n                placeholder=\"Password\"\n                type=\"password\" \n                value={this.state.password} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={showErr('password') ? \"shown-messages\" : \"hidden-messages\"}>Enter Password</p>\n                <br/>\n                <p className={this.state.attempt ? \"hidden-messages\" : \"shown-messages\"}>Sign-In Failed</p>\n                <br/>\n                \n                <button disabled={!isEnabled} onClick={e => this.onSubmit(e)}>Sign-In</button>\n            </form>\n            <p>New User?</p> <Link to=\"/CUForm\">Create Account</Link>\n            </div>\n        )\n    }\n}\nSIForm.contextType = AuthContext;","import React, { Component } from 'react';\nimport '../../form.css'\n\n\n\n\nclass TaskTable extends Component {\n    state = {\n        clickedTasks: [],\n        clickedButtons: [],\n        unavailableTasks: []\n    }\n    \n    //Checks if each row has been clicked\n    checkClicked(id){\n        let bool = (this.state.clickedTasks.includes(id))\n        return bool\n    }\n\n    //Checks if a task is completed\n    checkComplete(id){\n        let bool = (this.props.completedTasks.includes(id))\n        return bool\n    }\n\n    //Checks if a delete is ready to be confirmed\n    checkDeletable(id){\n        let bool = (this.state.clickedButtons.includes(id))\n        return bool\n    }\n\n    //Sends the names of each row on mount, creating the array of unavailable list names\n    //checks for completed attributes on tasks to create the completed tasks array\n    componentDidMount(){\n        this.props.unavailableTasks.push(this.props.obj.name)\n        this.setState({ unavailableTasks: this.props.unavailableTasks})\n\n        if(this.props.obj.completed === \"true\"){\n            this.props.completedTasks.push(this.props.obj._id)\n            this.setState({ completedTasks: this.props.completedTasks })\n        }\n    }\n\n    render() {\n        const id = this.props.obj._id\n        const name = this.props.obj.name\n\n        return (\n            <div \n            shape=\"rTableRow\" \n            onClick={() => this.props.isClicked(id, name)}\n            onClickCapture={() => this.setState({clickedTasks: this.props.clickedTasks})}\n            className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"} \n            completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}\n            deletable={(this.checkDeletable(id)) ? \"true\" : \"false\"}\n            >\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}>\n                    {this.props.obj.name}\n                </div>\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}>\n                    {this.props.obj.description}\n                </div>\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}>\n                    {this.props.obj.due}\n                </div>\n                <div \n                shape=\"rTableCell\">\n                    {/* Patches the task to change its completed attribute */}\n                    <button \n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"} \n                    onClick={() => this.props.isCompleted(id)}\n                    onClickCapture={() => this.setState({completedTasks: this.props.completedTasks})}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"} \n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Done</button>\n\n                    {/* The real Delete button, only visible after being primed by the first delete button */}\n                    <button \n                    className=\"deletebutton\"\n                    onClick={() => this.props.deleteOneTask(id)}\n                    shown={(this.checkDeletable(id)) ? \"\" : \"hidden\"}\n                    >Delete Task?</button>\n                \n                </div>\n                <div \n                shape=\"rTableCell\">\n                    <button className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"} \n                    onClick={() => this.props.editMenu(this.props.obj)}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Edit</button>\n\n                <button \n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"\"}\n                    onClick={() => this.props.buttonClicked(id)}\n                    shown={(this.checkDeletable(id)) ? \"show\" : \"hidden\"}\n                    >Cancel</button>\n                </div>\n                <div shape=\"rTableCell\">   \n\n                    {/* Primes the delete function, revealing the button to delete this task after confirmation */}\n                    <button \n                    onClick={() => this.props.buttonClicked(id)} \n                    onClickCapture={() => this.setState({clickedButtons: this.props.clickedButtons})}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}\n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Delete</button> \n                    \n                </div>\n                    \n            </div>\n        );\n    }\n}\n\nexport default TaskTable;","import React, { Component } from 'react';\nimport TaskTable from './TaskTable.js'\nimport '../../form.css'\n\n\nexport default class TaskDisplay extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = { \n            clickedTasks: [],\n            completedTasks: [],\n            clickedButtons: [],\n            unavailableTasks: []\n        };\n    }\n\n    //Maps the taskCollection to allow data elements to fit nicely into a div table.\n    taskTable = () => {\n        return this.props.taskCollection.map((data, i) => {\n            return <TaskTable obj={data} key={i}\n            editMenu={this.props.editMenu} \n            isClicked={this.props.isClicked} clickedTasks={this.props.clickedTasks} \n            isCompleted={this.props.isCompleted} completedTasks={this.props.completedTasks}\n            deleteOneTask={this.props.deleteOneTask}\n            clickedButtons={this.props.clickedButtons} buttonClicked={this.props.buttonClicked}\n            unavailableTasks={this.props.unavailableTasks}\n            \n            />;\n        });\n    }\n\n    render(){\n        const taskTable = this.taskTable()\n\n\n        return(\n            <div className=\"tableDisplay\">\n                <div shape=\"rTable\">\n                        <div shape=\"rTableRow\">\n                            <div shape=\"rTableCell\">Name</div>\n                            <div shape=\"rTableCell\">Description</div>\n                            <div shape=\"rTableCell\">Due</div>\n                        </div>\n                    \n                        {taskTable}\n                        \n                </div>\n\n            </div>\n\n        )\n    }\n\n\n\n}\n","import React from 'react';\nimport Axios from 'axios';\nimport 'react-router-dom'\nimport TaskDisplay from './TaskDisplay';\nimport { AuthContext } from '../../Context/Authentication'\nimport { Redirect, withRouter } from 'react-router-dom';\nimport '../../form.css'\nimport { URL } from '../../App'\n\n\n\n\nclass CTForm extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            name: \"\",\n            description: \"\",\n            due: \"\",\n            selection: \"\",\n            editId: \"\",\n            taskCollection: [],\n            clickedTasks: [],\n            clickedTaskNames: [],\n            completedTasks: [],\n            clickedButtons: [],\n            unavailableTasks: [],\n            doneDelete: false,\n            selectedDelete: false,\n            tasksLoaded: false\n            \n        };\n\n        this.change = this.change.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.editMenu = this.editMenu.bind(this)\n        this.isClicked = this.isClicked.bind(this)\n        this.isCompleted = this.isCompleted.bind(this)\n        this.deleteOneTask = this.deleteOneTask.bind(this)\n        this.buttonClicked = this.buttonClicked.bind(this)\n        this.setDoneDelete = this.setDoneDelete.bind(this)\n        \n    }\n\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n\n    };\n\n    //Gets updated tasks from the server, filtered by user and list attributes assigned on creation\n    refreshTasks(){\n        Axios.get(`${URL}/tasks?user=${this.context.state.userLogged}&list=${this.context.state.activeList}`)\n        .then(res => {\n            console.log(res.data)\n            this.setState({\n                 taskCollection: res.data.data,\n             });\n             this.setState({tasksLoaded: true})\n        })\n        .catch(function(error){\n            console.log(error);\n        })\n    }\n\n    //Posts a new task to the DB with user and list context values as attributes for filtering\n    onSubmit = (e) => {\n        e.preventDefault()\n        const task = {\n            user: this.context.state.userLogged,\n            name: this.state.name,\n            description: this.state.description,\n            due: this.state.due,\n            list: this.context.state.activeList\n        }\n        Axios.post(`${URL}/tasks`, task)\n        .then((res) => {\n            console.log(res.data)\n            this.setState({\n                name: \"\",\n                description: \"\",\n                due: \"\"\n            })\n            this.refreshTasks()\n        }).catch((error) => {\n            console.log(error)\n        });\n    }\n\n    //Refreshes Tasks on mount\n    componentDidMount = () => {\n        this.refreshTasks()\n    }\n    \n    //Sets state as the current value of the task to edit, to be passed as state on redirect to the update forms.\n    //Makes the fields filled with the current values of the list for easier editting.\n    editMenu(obj){\n        this.setState({\n            name: obj.name,\n            description: obj.description,\n            due: obj.due,\n            editId: obj._id \n        })\n        //Removes current name from the unavailable tasks to allow patching without changing the name.\n        this.state.unavailableTasks.splice(this.state.unavailableTasks.indexOf(obj.name), 1);\n        this.setState({ redirect: true})\n    }\n\n    //Creates an array of all tasks that are currently clicked to display css, and another to target for bulk delete of specific items.\n    //Bulk delete needs to work with names rather than ID, Mongo's Object(ID) method has strict rules preventing aggregate syntax.\n    //An array of names can be passed in mimicking perfect aggregate query syntax of endless length for specific deletions in bulk -\n    //- with one DeleteMany Request to the Database, duplicate protection on create ensures no unintended deletions.\n    isClicked(id, name){\n        let clicked = (this.state.clickedTasks.includes(id))\n       if(clicked === false){\n           this.state.clickedTasks.push(id)\n           this.state.clickedTaskNames.push(name)\n           return clicked === true\n\n       } else if(clicked === true){\n           this.state.clickedTasks.splice(this.state.clickedTasks.indexOf(id), 1);\n           this.state.clickedTaskNames.splice(this.state.clickedTaskNames.indexOf(id), 1);\n           return clicked === false\n       }\n    }\n\n    //Creates an array to track clicked buttons for delete confirmation\n    buttonClicked(id){\n        let clicked = (this.state.clickedButtons.includes(id))\n       //console.log(clicked)\n       if(clicked === false){\n           this.state.clickedButtons.push(id)\n           return clicked === true\n\n       } else if(clicked === true){\n           this.state.clickedButtons.splice(this.state.clickedButtons.indexOf(id), 1);\n           return clicked === false\n       }\n    }\n\n    //Patches a specific task to update its completed attribute, displaying greyed out css\n    //Primes task to be deleted with the other completed tasks in bulk\n    isCompleted(id){\n        Axios.get(`${URL}/tasks-completed?id=${id}&completed=true`)\n        .then(res => {\n            if(res.data === false){\n                const task = { completed: \"true\" }\n                Axios.patch(`${URL}/tasks?id=${id}`, task)\n            .then((res) => {\n                this.state.completedTasks.push(id)\n                this.refreshTasks()\n            }).catch((error) => {\n                console.log(error)\n            });\n                \n            } else if(res.data === true){\n                const task = { completed: \"false\" }\n                Axios.patch(`${URL}/tasks?id=${id}`, task)\n            .then((res) => {\n                this.state.completedTasks.splice(this.state.completedTasks.indexOf(id), 1);\n                this.refreshTasks()\n            }).catch((error) => {\n                console.log(error)\n            });\n    \n            }\n    \n        })\n        .catch(function(error){\n            console.log(error);\n        })\n    }\n\n    //Deletes a specific task by ID\n    deleteOneTask(id){\n        console.log(id)\n        Axios.delete(`${URL}/tasks?id=${id}`)\n        .then(res => {\n            this.state.unavailableTasks.splice(0, this.state.unavailableTasks.length)\n            this.refreshTasks()\n            //console.log(res)\n        })\n        .catch(function(error){\n            console.log(error);\n        })\n    }\n\n    //Deletes all tasks in the list with completed: true attributes\n    deleteDoneTasks(){\n        Axios.delete(`${URL}/tasks-completed?user=${this.context.state.userLogged}&list=${this.context.state.activeList}`)\n        .then(res => {\n            console.log(res.data)\n            this.state.unavailableTasks.splice(0, this.state.unavailableTasks.length)\n            this.refreshTasks()\n        })\n        .catch(function(error){\n            console.log(error);\n        })\n    }\n\n    //Deletes all currently clicked tasks by sending an array of any length to be converted into aggregate query syntax.\n    //All specified tasks are deleted with one Mongo deleteMany function\n    deleteSelectedTasks(){\n        const names = this.state.clickedTaskNames\n            Axios.delete(`${URL}/tasks-selected?user=${this.context.state.userLogged}&list=${this.context.state.activeList}`, {\n                params: {\n                    names: names\n                }\n            })\n            .then(res => {\n                //Clears targeted tasks from the unavailable tasks array after deletion\n                this.state.unavailableTasks.splice(0, this.state.unavailableTasks.length)\n                this.refreshTasks()\n            })\n            .catch(function(error){\n                console.log(error);\n            })\n    }\n\n    //Triggers redirect to the list selection\n    goBack(){\n        this.setState({ back: true })\n    }\n\n    //Primes the button to delete all completed tasks after confirmation\n    setDoneDelete(){\n        if(this.state.doneDelete === false){\n            this.setState({ doneDelete: true})\n            return true\n        } else if(this.state.doneDelete === true){\n            this.setState({ doneDelete: false })\n            return false\n        }\n    }\n    \n    //Primes the button to delete all selected tasks after confirmation\n    setSelectedDelete(){\n        if(this.state.selectedDelete === false){\n            this.setState({ selectedDelete: true })\n            return true\n        } else if(this.state.selectedDelete === true){\n            this.setState({ selectedDelete: false })\n            return false\n        }\n    }\n\n    render () {\n\n        //Redirects to the edit list form, passing in the current list values to populate the fields for easier editting\n        if(this.state.redirect){\n        return (\n            <Redirect push={true} to={{\n                pathname: '/ETask',\n                state: { \n                    id: this.state.editId,\n                    name: this.state.name,\n                    description: this.state.description,\n                    due: this.state.due,\n                    unavailableTasks: this.state.unavailableTasks\n                }\n            }}/>\n        )\n        }\n\n        //Redirects back to the list selection\n        if(this.state.back){\n            return (\n                <Redirect push to={'/Select'}/>\n            )\n        }\n        \n        return(\n            <div>\n            <form>\n                <h3>Create New Task</h3>\n                <input\n                name=\"name\"\n                maxLength={20}\n                placeholder=\"Task Name\"\n                value={this.state.name}\n                onChange={e => this.change(e)}\n                />\n                {/* Displays message when the taskname is a duplicate in the same list */}\n                <p className={(this.state.unavailableTasks.includes(this.state.name)) ? \"shown-messages\" : \"hidden-messages\" }>No duplicate tasks in the same list</p>\n                <br/>\n                <input\n                name=\"description\"\n                maxLength={50}\n                placeholder=\"What to do\"\n                value={this.state.description}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <input\n                name=\"due\"\n                maxLength={20}\n                placeholder=\"When to have it done\"\n                value={this.state.due}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                {/* Prevents submission until the tasks are loaded to ensure duplicate names are known, and the input is valid */}\n                <button disabled={this.state.name.length === 0 || (this.state.unavailableTasks.includes(this.state.name)) || (this.state.tasksLoaded === false)} onClick={e => this.onSubmit(e)}>Add Task</button>\n                \n            </form>\n            <h2>{`${this.context.state.activeList}`}</h2>\n            <button type=\"button\" onClick={() => this.goBack()}>Back</button>\n\n            {/* Displays retrieved tasks filtered by userLogged and activeList context values */}\n            <TaskDisplay taskCollection={this.state.taskCollection} \n            editMenu={this.editMenu} isClicked={this.isClicked} \n            clickedTasks={this.state.clickedTasks} \n            isCompleted={this.isCompleted}\n            completedTasks={this.state.completedTasks}\n            deleteOneTask={this.deleteOneTask}\n            clickedButtons={this.state.clickedButtons}\n            buttonClicked={this.buttonClicked}\n            unavailableTasks={this.state.unavailableTasks}\n\n            />\n            <br/>\n            \n                {/* Primes completed task delete, revealing real button and a cancel option */}\n                <button \n                    onClick={() => this.setDoneDelete()} \n                    shown={this.state.doneDelete ? \"hidden\" : \"\"}\n                    >Delete Done Tasks</button> \n                \n                <button \n                    className=\"Clicked\"\n                    onClick={() => this.setDoneDelete()}\n                    shown={this.state.doneDelete ? \"show\" : \"hidden\"}\n                    >Cancel</button>\n                \n                {/* Primes selected task delete, revealing real button and a cancel option */}\n                <button\n                    onClick={() => this.setSelectedDelete()}\n                    shown={this.state.selectedDelete ? \"hidden\" : \"\"}\n                    >Delete Selected Tasks</button>\n\n                <button \n                    className=\"Clicked\"\n                    onClick={() => this.setSelectedDelete()}\n                    shown={this.state.selectedDelete ? \"show\" : \"hidden\"}\n                    >Cancel</button>\n               \n                \n\n            <br/>\n\n            {/* Deletes all completed tasks in the list */}\n            <button \n                    className=\"deletebutton\"\n                    onClick={() => this.deleteDoneTasks()}\n                    onClickCapture={() => this.setDoneDelete()}\n                    shown={this.state.doneDelete ? \"\" : \"hidden\"}\n                    >Delete Completed Tasks?</button>\n\n            {/* Deletes all selected tasks in the list */}\n            <button \n                    className=\"deletebutton\"\n                    onClick={() => this.deleteSelectedTasks()}\n                    onClickCapture={() => this.setSelectedDelete()}\n                    shown={this.state.selectedDelete ? \"\" : \"hidden\"}\n                    >Delete Selected Tasks?</button>\n\n                    <br/>\n            \n            </div>\n\n            \n\n        )\n        \n    }\n\n}\nexport default withRouter(CTForm)\nCTForm.contextType = AuthContext;","import React from 'react'\n//import { Link } from \"react-router-dom\";\n\nexport const Links = () => {\n    return(\n        <ul>\n              \n        </ul>\n    )\n}","import React from \"react\";\nimport {\n    Route,\n    Redirect\n} from \"react-router-dom\";\n\nimport { AuthContext } from '../../Context/Authentication'\n\n// A wrapper for Routes that redirects to the login screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n    return (\n        <AuthContext.Consumer>\n            {({isAuthenticated}) => (\n                    <Route\n                        {...rest}\n                        render={({ location }) =>\n                            isAuthenticated ? (\n                                children\n                            ) : (\n                                    <Redirect\n                                        to={{\n                                            pathname: \"/\",\n                                            state: { from: location }\n                                        }}\n                                    />\n                                )\n                        }\n                    />\n                )\n            }\n        </AuthContext.Consumer>\n        \n    );\n}\n\nexport default PrivateRoute","import React from 'react';\nimport Axios from 'axios';\nimport { AuthContext } from '../../Context/Authentication';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport { URL } from '../../App'\n\n\nclass CLForm extends React.Component{\n    state = {\n        name: \"\",\n        desc: \"\",\n        due: \"\",\n\n        unavailableLists: []\n    }\n\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n    };\n    \n    //Post a new list with a user attribute, linking the list to the current account, then redirecting\n    onSubmit = e => {\n        e.preventDefault()\n\n        const list = {\n            user: this.context.state.userLogged,\n            name: this.state.name,\n            description: this.state.desc,\n            due: this.state.due,\n        }\n      \n        Axios.post(`${URL}/lists`, list)\n        .then((res) => {\n            console.log(res.data)\n            this.setState({\n                name: \"\",\n                desc: \"\",\n                due: \"\"\n            })\n            this.setState({ redirect: true })\n        }).catch((error) => {\n            console.log(error)\n        });\n\n        \n\n    }\n    \n    //Get the unavailable listnames to prevent duplicates\n    componentDidMount(){\n        this.setState({ unavailableLists: this.props.history.location.state.unavailableLists })\n    }\n\n    //Trigger redirect back to list selection\n    goBack(){\n        this.setState({ redirect: true })\n    }\n    \n    render () {\n        //Redirect to list select after a successful post, or by using the back button\n        if (this.state.redirect){\n            return (\n                <Redirect push to={'/Select'}/>\n            )\n        }\n\n        return(\n            <div>\n            <form>\n                <h3>Create New List</h3>\n                <input\n                name=\"name\"\n                maxLength={20}\n                placeholder=\"List Name\"\n                value={this.state.name}\n                onChange={e => this.change(e)}\n                />\n                {/* Displays a message when the name is a duplicate */}\n                <p className={(this.state.unavailableLists.includes(this.state.name)) ? \"shown-messages\" : \"hidden-messages\" } >List names must be unique</p>\n                <br/>\n                <input\n                name=\"desc\"\n                maxLength={50}\n                placeholder=\"Type of List\"\n                value={this.state.desc}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <input\n                name=\"due\"\n                maxLength={20}\n                placeholder=\"Timeframe\"\n                value={this.state.due}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                {/* Disables button when the name is unavailable, preventing duplicates */}\n                <button disabled={(this.state.unavailableLists.includes(this.state.name)) ? true : false} \n                onClick={e => this.onSubmit(e)}\n                >Add List</button>\n                <br/>\n                <button type=\"button\" onClick={() => this.goBack()}>Back</button>\n\n            </form>\n            </div>\n        )\n    }\n\n}\nexport default withRouter(CLForm);\nCLForm.contextType = AuthContext","import React from 'react';\nimport '../../form.css'\nimport Axios from 'axios'\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { URL } from '../../App'\n\n//onChange form validation, assigning CSS to fields with errors and determining if all fields are valid for submission.\nfunction validate(username, email, password, cpassword) {\n    return {\n        username: username.length === 0,\n        email: email.length === 0,\n        password: password.length === 0,\n        cpassword: cpassword !== password || cpassword.length === 0\n    }\n    \n}\n\nexport default class CUForm extends React.Component {\n    state = {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        cpassword: \"\",\n\n        touched: {\n            username: false, \n            email: false,\n            password: false,\n            cpassword: false,\n        },\n\n        unavailableUsers: [],\n        unavailableEmails: []\n    };\n\n    //Setting state with field values on  change\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n    };\n\n    //Allowing css to be applied only after a field has been touched\n    handleBlur = (field) => e => {\n        this.setState({\n          touched: { ...this.state.touched, [field]: true },\n        });\n      }\n\n    //Posting a new user to the DB\n    onSubmit = e => {\n        e.preventDefault()\n        const user = {\n            username: this.state.username,\n            email: this.state.email,\n            password: this.state.password\n        }\n        //Checking to see if username is available\n        Axios.get(`${URL}/users-names?username=${this.state.username}`)\n        .then(res => {\n            //if username is available, check email availability\n            if(res.data === true){\n            (Axios.get(`${URL}/users-emails?email=${this.state.email}`)\n            .then((res) => {\n                //if email is available, post new user\n                if(res.data === true){\n                    console.log(`Email ${this.state.email} Available`)\n                    Axios.post(`${URL}/users`, user)\n                    .then((res) => {\n                        console.log(res.data)\n                    }).catch((error) => {\n                        console.log(error)\n                    });\n                    //Clearing forms\n                    this.setState({\n                        username: \"\",\n                        email: \"\",\n                        password: \"\",\n                        cpassword: \"\",\n    \n                        touched: {\n                            username: false,  \n                            email: false,\n                            password: false,\n                            cpassword: false,\n                        }\n    \n                    })\n                    //Trigger redirect to sign-in form\n                    this.setState({ redirect: true})\n                    //if email is unavailable, push email to array of unavailable emails to check onChange\n                } else if(res.data === false){\n                    this.state.unavailableEmails.push(this.state.email)\n                    this.setState({email: this.state.email})\n                    console.log(`Email ${this.state.email} is already in use`)\n                }\n            }).catch((error) => {\n                console.log(error)\n            }))\n             \n            //if username is unavailable, push username to array of unavailable names to check onChange\n            } else if(res.data === false){\n                this.state.unavailableUsers.push(this.state.username)\n                this.setState({username: this.state.username})\n                console.log(`Username ${this.state.username} is unavailable`)\n            }\n        }) \n        .catch(function(error){\n            console.log(error);\n        })\n\n    }\n\n    render(){\n        //Redirects to sign-in after successful user creation\n        if (this.state.redirect) {\n            return <Redirect push to={ '/' }/>\n          }\n        \n        //Checks if each field has valid entries\n        var errors = validate(this.state.username, this.state.email, this.state.password, this.state.cpassword);        \n        const isEnabled = !Object.keys(errors).some(x => errors[x]);\n        \n        //Checks if error css should be shown\n        const showErr = (field) => {\n            const hasError = errors[field];\n            const shouldShow = this.state.touched[field];\n      \n            return hasError ? shouldShow : false;\n          };\n\n        //Checks if good css should be shown\n          const showValid = (field) => {\n            const shouldShow = this.state.touched[field];\n\n            return shouldShow ? true : false\n            \n          };\n          \n        return (\n            <div>\n            <form>\n                <h3>New User Registration</h3>\n                <input \n                name=\"username\" \n                maxLength={30}\n                className={showErr('username') ? \"error\" : \"\"}\n                filled={showValid('username') ? \"good\" : \"\"}\n                taken={this.state.unavailableUsers.includes(this.state.username) ? \"true\" : \"\"}\n                onBlur={this.handleBlur('username')}\n                placeholder=\"Username\"\n                value={this.state.username} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={this.state.unavailableUsers.includes(this.state.username) ? \"shown-messages\" : \"hidden-messages\"}> Username unavailable</p>\n                <p className={showErr('username') ? \"shown-messages\" : \"hidden-messages\"}> Enter Username</p>\n                <br/>\n                <input \n                name=\"email\"\n                maxLength={30}\n                className={showErr('email') ? \"error\" : \"\"}\n                filled={showValid('email') ? \"good\" : \"\"}\n                taken={this.state.unavailableEmails.includes(this.state.email) ? \"true\" : \"\"}\n                onBlur={this.handleBlur('email')}\n                placeholder=\"Email Address\" \n                value={this.state.email} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={this.state.unavailableEmails.includes(this.state.email) ? \"shown-messages\" : \"hidden-messages\"}> Email already in use, try Signing In</p>\n                <p className={showErr('email') ? \"shown-messages\" : \"hidden-messages\"}> Enter a valid Email address</p>\n                <br/>\n                <input \n                name=\"password\"\n                maxLength={30}\n                className={showErr('password') ? \"error\" : \"\"}\n                filled={showValid('password') ? \"good\" : \"\"}\n                onBlur={this.handleBlur('password')}\n                placeholder=\"Password\"\n                type=\"password\" \n                value={this.state.password} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={showErr('password') ? \"shown-messages\" : \"hidden-messages\"}>Enter a good password</p>\n                <br/>\n                <input \n                name=\"cpassword\"\n                maxLength={30}\n                className={showErr('cpassword') ? \"error\" : \"\"}\n                filled={showValid('cpassword') ? \"good\" : \"\"}\n                onBlur={this.handleBlur('cpassword')}\n                placeholder=\"Confirm Password\"\n                type=\"password\" \n                value={this.state.cpassword} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={showErr('cpassword') ? \"shown-messages\" : \"hidden-messages\"}>Passwords must match</p>\n                <br/>\n                <p className={isEnabled ? \"shown-messages\" : \"hidden-messages\"}>Ready to submit</p>\n                <br/>\n                <button disabled={!isEnabled} onClick={e => this.onSubmit(e)}>Create Account</button>\n                \n            </form>\n            <p>Already have an account?</p><Link to=\"/\">Sign-in</Link>\n            </div>\n            \n        )\n    }\n}","import React, { Component } from 'react';\n\n\n\n\nclass ListTable extends Component {\n    state = {\n        clickedLists: [],\n        clickedButtons: [],\n        unavailableLists: []\n    }\n    \n    //Checks if each row has been clicked\n    checkClicked(id){\n        let bool = (this.state.clickedLists.includes(id))\n        return bool\n    }\n\n    //Checks if a delete is ready to be confirmed\n    checkDeletable(id){\n        let bool = (this.state.clickedButtons.includes(id))\n        return bool\n    }\n\n    //Sends the names of each row on mount, creating the array of unavailable list names\n    componentDidMount(){\n        this.props.unavailableLists.push(this.props.obj.name)\n        this.setState({ unavailableLists: this.props.unavailableLists})\n    }   \n\n    render() {\n        const listname = this.props.obj.name\n        const id = this.props.obj._id\n\n        return (\n            \n            <div \n            shape=\"rTableRow\"\n            onClick={() => this.props.isClicked(id)}\n            onClickCapture={() => this.setState({clickedLists: this.props.clickedLists})}\n            className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"} \n            deletable={(this.checkDeletable(id)) ? \"true\" : \"false\"}\n            >\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}>\n                    {this.props.obj.name}\n                </div>\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}>\n                    {this.props.obj.description}\n                </div>\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}>\n                    {this.props.obj.due}\n                </div>\n            <div>\n                <div\n                shape=\"rTableCell\">\n                    <button \n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"} \n                    onClick={() => this.props.clickHandler(listname)}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Select</button>\n\n                    <button \n                    className=\"deletebutton\"\n                    onClick={() => this.props.deleteOneList(id, listname)}\n                    shown={(this.checkDeletable(id)) ? \"\" : \"hidden\"}\n                    >Delete List?</button>\n                \n                </div>\n                <div\n                shape=\"rTableCell\">\n                    <button className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"} \n                    onClick={() => this.props.editMenu(this.props.obj)}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Edit</button>\n\n                    <button \n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"\"}\n                    onClick={() => this.props.buttonClicked(id)}\n                    shown={(this.checkDeletable(id)) ? \"show\" : \"hidden\"}\n                    >Cancel</button>\n                </div>\n                </div>\n                <div\n                shape=\"rTableCell\">    \n                    <button \n                    onClick={() => this.props.buttonClicked(id)} \n                    onClickCapture={() => this.setState({clickedButtons: this.props.clickedButtons})}\n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Delete</button> \n                    \n                </div>\n            </div>\n            \n        );\n    }\n    \n}\n\nexport default ListTable;","import React, { Component } from 'react';\nimport ListTable from './ListTable'\n\nexport default class ListDisplay extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = { \n            clickedLists: [],\n            clickedButtons: []\n        \n        };\n    }\n\n    //Maps the listCollection to allow data elements to fit nicely into a div table.\n    listTable = () => {\n        return this.props.listCollection.map((data, i) => {\n            return <ListTable obj={data} key={i} clickHandler={this.props.clickHandler} \n            editMenu={this.props.editMenu} \n            isClicked={this.props.isClicked} clickedLists={this.props.clickedLists} \n            deleteOneList={this.props.deleteOneList}\n            clickedButtons={this.props.clickedButtons} buttonClicked={this.props.buttonClicked}\n            unavailableLists={this.props.unavailableLists} />;\n        });\n    }\n\n\n    render(){\n        const listTable = this.listTable()\n        \n        return(\n            <div className=\"tableDisplay\">\n                <div shape=\"rTable\">\n                        <div shape=\"rTableRow\">\n                            <div shape=\"rTableCell\">Name</div>\n                            <div shape=\"rTableCell\">Description</div>\n                            <div shape=\"rTableCell\">Due</div>\n                        </div>\n                    \n                        {listTable}\n                        \n                </div>\n            </div>\n            \n\n        )\n    }\n\n}\n","import React, { Component } from 'react';\nimport ListDisplay from './Lists/ListDisplay';\nimport Axios from 'axios'\nimport { Redirect } from 'react-router';\nimport {AuthContext} from '../Context/Authentication'\nimport '../App.css'\nimport {URL} from '../App'\n\nexport default class SelectList extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      selection: \"\",\n      listCollection: [],\n      clickedLists: [],\n      clickedButtons: [],\n      unavailableLists: [],\n      editId: \"\",\n      listsLoaded: false\n      \n    }\n\n\n    this.clickHandler = this.clickHandler.bind(this)\n    this.isClicked = this.isClicked.bind(this)\n    this.deleteOneList = this.deleteOneList.bind(this)\n    this.buttonClicked = this.buttonClicked.bind(this)\n    this.editMenu = this.editMenu.bind(this)\n\n  }\n\n\n  //Gets current lists from the DB, filtered by the current userLogged\n  refreshLists = () => {\n    const user = this.context.state.userLogged\n    Axios.get(`${URL}/lists?user=${user}`)\n        .then(res => {\n            console.log(res)\n            this.setState({ listCollection: res.data.data,\n            listsLoaded: true })\n\n        })\n        .catch(function(error){\n            console.log(error)\n        })\n  }\n\n  //Refreshes to grab current lists on mount\n  componentDidMount(){\n  this.refreshLists()\n  }\n\n  //Stores a clicked state for each list to display the CSS and the menu\n  isClicked(id){\n    let clicked = (this.state.clickedLists.includes(id))\n    if(clicked === false){\n        this.state.clickedLists.push(id)\n        return clicked === true\n\n    } else if(clicked === true){\n        this.state.clickedLists.splice(this.state.clickedLists.indexOf(id), 1);\n        return clicked === false\n    }\n  }\n\n  //stores a clicked state for buttons\n  buttonClicked(id){\n    let clicked = (this.state.clickedButtons.includes(id))\n    if(clicked === false){\n        this.state.clickedButtons.push(id)\n        return clicked === true\n\n    } else if(clicked === true){\n        this.state.clickedButtons.splice(this.state.clickedButtons.indexOf(id), 1);\n        return clicked === false\n    }\n  }\n\n  //Selects a list, setting the name as the current selection and triggering a redirect\n  clickHandler(name) {\n    console.log(name)\n    this.setState({ selection: name });\n    this.setState({ redirect: true });\n  }\n\n  //triggers a redirect to the create list form\n  addlist(){\n    this.setState({ redirect2: true})\n    \n  }\n\n  //Deletes a list by ID, and all tasks with that list attribute\n  deleteOneList(id, listname){\n    console.log(id)\n    Axios.delete(`${URL}/lists?id=${id}&list=${listname}&user=${this.context.state.userLogged}`)\n    .then(res => {\n      //Removes this listname from the unavailable lists for duplicate protection.\n        this.state.unavailableLists.splice(this.state.unavailableLists.indexOf(id), 1);\n        this.refreshLists()\n    })\n    .catch(function(error){\n        console.log(error);\n    })\n  }\n\n//Sets state as the current value of the list to edit, to be passed as state on redirect to the update forms.\n//Makes the fields filled with the current values of the list for easier editting.\n  editMenu(obj){\n        this.setState({\n            name: obj.name,\n            description: obj.description,\n            due: obj.due,\n            editId: obj._id \n        })\n        //Removes current name from the unavailable lists to allow patching without changing the name.\n        this.state.unavailableLists.splice(this.state.unavailableLists.indexOf(obj.name), 1);\n        this.setState({ redirect3: true})\n  }\n\n  render() {\n\n    //Redirects to task display, setting the context activeList value to filter for relevant tasks,\n    //resetting the userLogged context value as it's current value to prevent the logged state from being cleared\n    if (this.state.redirect) {\n      console.log(this.state.selection)\n        return(\n          <AuthContext.Consumer>\n            {({identify}) => (\n                <Redirect push={identify(this.context.state.userLogged, this.state.selection)} to={'/CTForm'}/>\n            )}\n          </AuthContext.Consumer>\n          \n        )\n    }\n\n    //Redirects to the create list form, passing in the currently used names as unavailable to prevent duplicates\n    if (this.state.redirect2){\n        return (\n          <Redirect push={true} to={{\n            pathname: '/CLForm',\n            state: {\n              unavailableLists: this.state.unavailableLists\n            }\n          }}/>\n        )\n    }\n\n    //Redirects to the edit list form, passing in the current list values to populate the fields for easier editting.\n    if(this.state.redirect3){\n        return (\n          <Redirect push={true} to={{\n            pathname: '/EList',\n            state: {\n              id: this.state.editId,\n              name: this.state.name,\n              description: this.state.description,\n              due: this.state.due,\n              unavailableLists: this.state.unavailableLists\n            }\n          }}/>\n        )\n    }\n\n    return (\n      <div>\n        {/* Forces the add list button to wait until the current lists are retrieved from the database,\n        ensuring the unavailable list names can be sent to the create form, preventing duplicates. */}\n        <button disabled={this.state.listsLoaded ? false : true} onClick={() => this.addlist()}>Create New List</button>\n        \n        {/* Displays the retrieved lists filtered by the userLogged context. */}\n        <ListDisplay listCollection={this.state.listCollection} clickHandler={this.clickHandler} \n        editMenu={this.editMenu} \n        isClicked={this.isClicked} clickedLists={this.state.clickedLists} \n        deleteOneList={this.deleteOneList}\n        clickedButtons={this.state.clickedButtons} buttonClicked={this.buttonClicked}\n        unavailableLists={this.state.unavailableLists} />\n        \n      </div>\n    );\n    }\n  }\n\nSelectList.contextType = AuthContext;\n","import React from 'react';\nimport Axios from 'axios';\nimport 'react-router-dom'\nimport { AuthContext } from '../../Context/Authentication'\nimport { withRouter, Redirect } from 'react-router-dom';\nimport { URL } from '../../App'\n\n\n\nclass ETask extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            name: \"\",\n            description: \"\",\n            due: \"\",\n            selection: \"\",\n            taskCollection: [],\n            unavailableTasks: []\n        };\n\n        this.change = this.change.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        \n    }\n\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n\n    };\n\n    //Patches the selected task, then redirects to task display\n    onSubmit = (e) => {\n        e.preventDefault()\n        const id = this.props.history.location.state.id\n        const task = {\n            user: this.context.state.userLogged,\n            name: this.state.name,\n            description: this.state.description,\n            due: this.state.due,\n            list: this.context.state.activeList\n        }\n        Axios.patch(`${URL}/tasks?id=${id}`, task)\n        .then((res) => {\n            this.setState({\n                name: \"\",\n                desc: \"\",\n                due: \"\"\n            })\n            this.setState({redirect: true})\n        }).catch((error) => {\n            console.log(error)\n        });\n    }\n\n    //Retrieves previous value of task fields for easier editting, as well as unavailable task names.\n    componentDidMount(){\n        this.setState({\n            name: this.props.history.location.state.name,\n            description: this.props.history.location.state.description,\n            due: this.props.history.location.state.due,\n            unavailableTasks: this.props.history.location.state.unavailableTasks\n        })\n    }\n\n    //Triggers redirect to task display\n    goBack(){\n        this.setState({ redirect: true })\n    }\n    \n    render () {\n\n        //Redirects to the create task form and the task display\n        if(this.state.redirect){\n            return (\n                <Redirect push to={'/CTForm'}/>\n            )\n        }\n        \n        return(\n            <div>\n            <form>\n                <h3>Edit Task</h3>\n                <input\n                name=\"name\"\n                maxLength={20}\n                placeholder=\"Task Name\"\n                value={this.state.name}\n                onChange={e => this.change(e)}\n                />\n                {/* Shows message when a task name is a duplicate in the same list */}\n                <p className={(this.state.unavailableTasks.includes(this.state.name)) ? \"shown-messages\" : \"hidden-messages\" } > Task names must be unique</p>\n                <br/>\n                <input\n                name=\"description\"\n                maxLength={50}\n                placeholder=\"What to do\"\n                value={this.state.description}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <input\n                name=\"due\"\n                maxLength={20}\n                placeholder=\"When to have it done\"\n                value={this.state.due}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                {/* Prevents submission unless the task name is unique in the list */}\n                <button disabled={this.state.name.length === 0 || (this.state.unavailableTasks.includes(this.state.name))} onClick={e => this.onSubmit(e)}>Update Task</button>\n                <br/>\n                <button type=\"button\" disabled={(this.state.unavailableTasks.includes(this.state.name)) ? true : false} onClick={() => this.goBack()}>Back</button>\n\n\n                \n            </form>\n          \n            </div>\n        )\n        \n    }\n\n}\n\nexport default withRouter(ETask);\nETask.contextType = AuthContext;","import React from 'react';\nimport Axios from 'axios';\nimport 'react-router-dom'\nimport { AuthContext } from '../../Context/Authentication'\nimport { withRouter, Redirect } from 'react-router-dom';\nimport '../../form.css'\nimport {URL} from '../../App'\n\n\n\nclass EList extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            name: \"\",\n            description: \"\",\n            due: \"\",\n            selection: \"\",\n            unavailableLists: [],\n            taskCollection: []\n        };\n\n        this.change = this.change.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        \n    }\n\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n\n    };\n\n    //Patches the list, as well as all tasks with the list attribute so they maintain their association.\n    onSubmit = e => {\n        e.preventDefault()\n        const user =this.context.state.userLogged\n        const id = this.props.history.location.state.id\n\n        //Gets previous listname to target associated tasks\n        const listname = this.props.history.location.state.name\n\n        //New name for the list attribute on associated tasks\n        const task = {\n            list: this.state.name\n        }\n\n        const list = {\n            user: this.context.state.userLogged,\n            name: this.state.name,\n            description: this.state.description,\n            due: this.state.due,\n        }\n        //Patch request for the list and associated tasks\n        Axios.patch(`${URL}/lists?user=${user}&id=${id}&prevName=${listname}`, {\n                list: list,\n                task: task\n        })\n        .then((res) => {\n            this.setState({\n                name: \"\",\n                desc: \"\",\n                due: \"\"\n            })\n            this.setState({redirect: true})\n        }).catch((error) => {\n            console.log(error)\n        });\n    }\n\n    //Retrieving current values of the list to populate the fields for easier editting\n    componentDidMount(){\n        this.setState({\n            name: this.props.history.location.state.name,\n            description: this.props.history.location.state.description,\n            due: this.props.history.location.state.due,\n            unavailableLists: this.props.history.location.state.unavailableLists\n        })\n    }\n\n    //Trigger Redirect Back to list selection\n    goBack(){\n        this.setState({ redirect: true })\n    }\n    \n    render () {\n\n        if(this.state.redirect){\n            return (\n                <Redirect push to={'/Select'}/>\n            )\n        }\n        \n        return(\n            <div>\n            <form>\n                <h3>Edit List</h3>\n                <input\n                name=\"name\"\n                maxLength={20}\n                placeholder=\"List Name\"\n                value={this.state.name}\n                onChange={e => this.change(e)}\n                />\n                {/* Displays message when the name is a duplicate */}\n                <p className={(this.state.unavailableLists.includes(this.state.name)) ? \"shown-messages\" : \"hidden-messages\" } > List names must be unique</p>\n                <br/>\n                <input\n                name=\"description\"\n                maxLength={50}\n                placeholder=\"What to do\"\n                value={this.state.description}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <input\n                name=\"due\"\n                maxLength={20}\n                placeholder=\"When to have it done\"\n                value={this.state.due}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <button disabled={this.state.name.length === 0} onClick={e => this.onSubmit(e)}>Update List</button>\n                <br/>\n                <button type=\"button\" onClick={() => this.goBack()}>Back</button>\n\n\n                \n            </form>\n          \n            </div>\n        )\n        \n    }\n\n}\n\nexport default withRouter(EList);\nEList.contextType = AuthContext;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport PrivateRoute from './PrivateRoutes'\nimport CTForm from '../Tasks/CreateTaskForm'\nimport CLForm from '../Lists/CreateListForm'\nimport CUForm from '../Users/CreateUserForm'\nimport SIForm from '../Users/SignInForm'\nimport SelectList from '../SelectList'\nimport EditTask from '../Tasks/EditTask'\nimport EditList from '../Lists/EditList'\n\nexport const Routes = () => {\n    return (  \n          \n        <div>\n          <Switch>\n          <Route exact path=\"/\">\n            <SIForm/>\n          </Route>\n          <PrivateRoute path=\"/CTForm\">\n            <CTForm />\n          </PrivateRoute>\n          <PrivateRoute path=\"/CLForm\">\n            <CLForm />\n          </PrivateRoute>\n          <Route path=\"/CUForm\">\n            <CUForm />\n          </Route>\n          <PrivateRoute path=\"/Select\">\n            <SelectList />\n          </PrivateRoute>\n          <PrivateRoute path=\"/ETask\">\n            <EditTask />\n          </PrivateRoute>\n          <PrivateRoute path=\"/EList\">\n            <EditList />\n          </PrivateRoute>\n          </Switch>\n        </div>\n    )\n  }\n  ","import React from 'react'\nimport { Routes } from '../Components/Navigation/Routes'\n\nexport default () => {\n    return (\n        <div>\n            <Routes/>\n        </div>\n    )\n}","import React, { useContext } from 'react'\n\nimport { AuthContext } from '../../Context/Authentication'\n \nfunction SignOut() {\n    let context = useContext(AuthContext)\n\n    return context.isAuthenticated ? (\n            <button\n                onClick={() => {\n                    context.signout()\n                }}\n            >\n                Sign out\n      </button>\n    ) : (\n            <p>Sign in to view lists</p>\n        )\n}\n\nexport default SignOut;","import React, { useState } from 'react';\nimport './App.css';\nimport './form.css';\nimport './Components/Users/SignInForm';\nimport './Components/Tasks/CreateTaskForm'\nimport { Links } from './Components/Navigation/Links'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { AuthContext } from './Context/Authentication'\n\nimport Main from './Pages/index'\nimport SignOut from './Components/Navigation/SignOut';\n\n//URL for API\nexport const URL = 'https://to-do-list-server-api.herokuapp.com'\n\n\nfunction App(){\n  const [isAuthenticated, setAuthenticated] = useState(false)\n  const [state, setState] = useState({\n    userLogged: \"\",\n    activeList: \"\"\n})\n\n//Provides the logged in state\n  const authenticate = () => {\n    setAuthenticated(true)\n  }\n\n  const signout = () => {\n    setAuthenticated(false)\n  }\n\n  //Sets the userlogged context value and the activeList context Value for data filtering.\n  const identify = (user, list) => {\n    console.log(user)\n    console.log(list)\n    setState({ userLogged: user, activeList: list })\n  }\n  \n  \n\n  const store = {\n    isAuthenticated,\n    state,\n    authenticate,\n    signout,\n    identify\n  }\n\n\n  return (\n    <div className=\"App\">\n      \n      <AuthContext.Provider value={store}>\n            <Router>\n            <SignOut/>\n            <Links />\n            <Main/>\n            </Router> \n      </AuthContext.Provider>\n    </div>\n  );\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\n\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}