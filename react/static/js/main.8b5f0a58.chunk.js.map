{"version":3,"sources":["Context/Authentication.js","Components/Users/SignInForm.js","Components/Tasks/TaskTable.js","Components/Tasks/TaskDisplay.js","Components/Tasks/CreateTaskForm.js","Components/Navigation/Links.js","Components/Navigation/PrivateRoutes.js","Components/Lists/CreateListForm.js","Components/Users/CreateUserForm.js","Components/Lists/ListTable.js","Components/Lists/ListDisplay.js","Components/SelectList.js","Components/Tasks/EditTask.js","Components/Lists/EditList.js","Components/Navigation/Routes.js","Pages/index.js","Components/Navigation/SignOut.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","isAuthenticated","userLogged","activeList","listNum","authenticate","signout","identify","SIForm","state","username","password","touched","attempt","change","e","setState","target","name","value","handleBlur","field","onSubmit","preventDefault","Axios","get","URL","then","res","console","log","data","context","redirect","catch","error","this","push","to","errors","length","isEnabled","Object","keys","some","x","showErr","hasError","shouldShow","showValid","maxLength","className","filled","onBlur","placeholder","onChange","type","disabled","onClick","Component","contextType","TaskTable","clickedTasks","clickedButtons","unavailableTasks","id","includes","props","completedTasks","obj","completed","shape","isClicked","onClickCapture","checkClicked","checkComplete","deletable","checkDeletable","description","due","isCompleted","shown","deleteOneTask","editMenu","buttonClicked","TaskDisplay","taskTable","taskCollection","map","i","key","CTForm","task","post","refreshTasks","componentDidMount","selection","editId","clickedTaskNames","doneDelete","selectedDelete","tasksLoaded","bind","setDoneDelete","splice","indexOf","clicked","patch","delete","names","params","back","pathname","goBack","setSelectedDelete","deleteDoneTasks","deleteSelectedTasks","withRouter","Links","PrivateRoute","children","rest","Consumer","render","location","from","CLForm","listname","desc","unavailableLists","list","tasks","history","CUForm","email","cpassword","unavailableUsers","unavailableEmails","user","lists","taken","ListTable","clickedLists","index","clickHandler","deleteOneList","ListDisplay","listTable","listCollection","SelectList","refreshLists","listsLoaded","listNumber","pos","redirect2","redirect3","addlist","ETask","EList","Routes","exact","path","EditTask","EditList","SignOut","useContext","App","useState","setAuthenticated","store","Provider","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b5f0a58.chunk.js","sourcesContent":["import React from 'react'\n\nexport const AuthContext = React.createContext({\n    isAuthenticated: false,\n    userLogged: \"none\",\n    activeList: \"none\",\n    listNum: \"\",\n    authenticate : () => {},\n    signout : () => {},\n    identify : () => {}\n})\n\n","import React from 'react';\nimport '../../form.css'\nimport Axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom'\nimport '../../App';\nimport { AuthContext } from '../../Context/Authentication';\nimport {URL} from '../../App'\n\n//Checks for valid form entries\nfunction validate(username, password) {\n    return {\n        username: username.length === 0,\n        password: password.length === 0,\n    }\n    \n}\n\nexport default class SIForm extends React.Component {\n   \n            state = { \n            username: \"\", \n            password: \"\",\n\n            touched: {\n                username: false, \n                password: false\n            },\n\n            attempt: true\n        }\n\n    //Setting state with field values on  change\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n    };\n\n    //Allowing css to be applied only after a field has been touched\n    handleBlur = (field) => e => {\n        this.setState({\n          touched: { ...this.state.touched, [field]: true },\n        });\n      }\n\n    //Attempt Sign-in\n    onSubmit = e => {\n        e.preventDefault()\n        //Pass in username and password to be checked\n        Axios.get(`${URL}/users-login?username=${this.state.username}&password=${this.state.password}`)\n        .then(res => {\n            console.log(res)\n            //if the username and password matches, set context value authenticated, and redirect\n            if(res.data === 'Sign in Failed'){\n                this.setState({\n                    username: \"\", \n                    password: \"\",\n\n                touched: {\n                    username: false, \n                    password: false\n                }\n                })\n                this.setState({ attempt: false})\n                console.log(`Matching Failed ${this.state.password}`)\n            //if the username and password does not match, display failed login attempt\n            } else {\n                console.log('Password matches')\n                this.context.authenticate(res.data)\n                this.setState({ attempt: true})\n                this.setState({ redirect: true})\n                \n            }\n        })\n        .catch(function(error){\n            console.log(error);\n        })\n       \n    }\n\n    render(){\n        if (this.state.redirect){\n            return(\n                <Redirect push to={'Select'}/>\n            )\n        }\n    \n        //Checks if each field has valid entries\n        var errors = validate(this.state.username, this.state.password);        \n        const isEnabled = !Object.keys(errors).some(x => errors[x]);\n        \n        //Checks if error css should be shown\n        const showErr = (field) => {\n            const hasError = errors[field];\n            const shouldShow = this.state.touched[field];\n      \n            return hasError ? shouldShow : false;\n          };\n\n        //Checks if good css should be shown\n        const showValid = (field) => {\n        const shouldShow = this.state.touched[field];\n\n        return shouldShow ? true : false\n        \n        };\n\n          \n        return (\n            <div>\n            <form>\n                <h3>Sign-In</h3>\n                <input \n                name=\"username\" \n                maxLength={20}\n                className={showErr('username') ? \"error\" : \"\"}\n                filled={showValid('username') ? \"good\" : \"\"}\n                onBlur={this.handleBlur('username')}\n                placeholder=\"Username\"\n                value={this.state.username} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={showErr('username') ? \"shown-messages\" : \"hidden-messages\"}>Enter Username</p>\n                <br/>\n                <input \n                name=\"password\"\n                maxLength={30}\n                className={showErr('password') ? \"error\" : \"\"}\n                filled={showValid('password') ? \"good\" : \"\"}\n                onBlur={this.handleBlur('password')}\n                placeholder=\"Password\"\n                type=\"password\" \n                value={this.state.password} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={showErr('password') ? \"shown-messages\" : \"hidden-messages\"}>Enter Password</p>\n                <br/>\n                <p className={this.state.attempt ? \"hidden-messages\" : \"shown-messages\"}>Sign-In Failed</p>\n                <br/>\n                \n                <button disabled={!isEnabled} onClick={e => this.onSubmit(e)}>Sign-In</button>\n            </form>\n            <p>New User?</p> <Link to=\"/CUForm\">Create Account</Link>\n            </div>\n        )\n    }\n}\nSIForm.contextType = AuthContext;","import React, { Component } from 'react';\nimport '../../form.css'\n\n\n\n\nclass TaskTable extends Component {\n    state = {\n        clickedTasks: [],\n        clickedButtons: [],\n        unavailableTasks: []\n    }\n    \n    //Checks if each row has been clicked\n    checkClicked(id){\n        let bool = (this.state.clickedTasks.includes(id))\n        return bool\n    }\n\n    //Checks if a task is completed\n    checkComplete(id){\n        let bool = (this.props.completedTasks.includes(id))\n        return bool\n    }\n\n    //Checks if a delete is ready to be confirmed\n    checkDeletable(id){\n        let bool = (this.state.clickedButtons.includes(id))\n        return bool\n    }\n\n    //Sends the names of each row on mount, creating the array of unavailable list names\n    //checks for completed attributes on tasks to create the completed tasks array\n    componentDidMount(){\n        this.props.unavailableTasks.push(this.props.obj.name)\n        this.setState({ unavailableTasks: this.props.unavailableTasks})\n\n        if(this.props.obj.completed === \"true\"){\n            this.props.completedTasks.push(this.props.obj.name)\n            this.setState({ completedTasks: this.props.completedTasks })\n        }\n    }\n\n    render() {\n        const id = this.props.obj.name\n\n        return (\n            <div \n            shape=\"rTableRow\" \n            onClick={() => this.props.isClicked(id)}\n            onClickCapture={() => this.setState({clickedTasks: this.props.clickedTasks})}\n            className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"} \n            completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}\n            deletable={(this.checkDeletable(id)) ? \"true\" : \"false\"}\n            >\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}>\n                    {this.props.obj.name}\n                </div>\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}>\n                    {this.props.obj.description}\n                </div>\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}>\n                    {this.props.obj.due}\n                </div>\n                <div \n                shape=\"rTableCell\">\n                    {/* Patches the task to change its completed attribute */}\n                    <button \n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"} \n                    onClick={() => this.props.isCompleted(id)}\n                    onClickCapture={() => this.setState({completedTasks: this.props.completedTasks})}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"} \n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Done</button>\n\n                    {/* The real Delete button, only visible after being primed by the first delete button */}\n                    <button \n                    className=\"deletebutton\"\n                    onClick={() => this.props.deleteOneTask(id)}\n                    shown={(this.checkDeletable(id)) ? \"\" : \"hidden\"}\n                    >Delete Task?</button>\n                \n                </div>\n                <div \n                shape=\"rTableCell\">\n                    <button className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"} \n                    onClick={() => this.props.editMenu(this.props.obj)}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Edit</button>\n\n                <button \n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"\"}\n                    onClick={() => this.props.buttonClicked(id)}\n                    shown={(this.checkDeletable(id)) ? \"show\" : \"hidden\"}\n                    >Cancel</button>\n                </div>\n                <div shape=\"rTableCell\">   \n\n                    {/* Primes the delete function, revealing the button to delete this task after confirmation */}\n                    <button \n                    onClick={() => this.props.buttonClicked(id)} \n                    onClickCapture={() => this.setState({clickedButtons: this.props.clickedButtons})}\n                    completed={(this.checkComplete(id)) ? \"rowCompleted\" : \"\"}\n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Delete</button> \n                    \n                </div>\n                    \n            </div>\n        );\n    }\n}\n\nexport default TaskTable;","import React, { Component } from 'react';\nimport TaskTable from './TaskTable.js'\nimport '../../form.css'\n\n\nexport default class TaskDisplay extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = { \n            clickedTasks: [],\n            completedTasks: [],\n            clickedButtons: [],\n            unavailableTasks: []\n        };\n    }\n\n    //Maps the taskCollection to allow data elements to fit nicely into a div table.\n    taskTable = () => {\n        return this.props.taskCollection.map((data, i) => {\n            return <TaskTable obj={data} key={i}\n            editMenu={this.props.editMenu} \n            isClicked={this.props.isClicked} clickedTasks={this.props.clickedTasks} \n            isCompleted={this.props.isCompleted} completedTasks={this.props.completedTasks}\n            deleteOneTask={this.props.deleteOneTask}\n            clickedButtons={this.props.clickedButtons} buttonClicked={this.props.buttonClicked}\n            unavailableTasks={this.props.unavailableTasks}\n            \n            />;\n        });\n    }\n\n    render(){\n        const taskTable = this.taskTable()\n\n\n        return(\n            <div className=\"tableDisplay\">\n                <div shape=\"rTable\">\n                        <div shape=\"rTableRow\">\n                            <div shape=\"rTableCell\">Name</div>\n                            <div shape=\"rTableCell\">Description</div>\n                            <div shape=\"rTableCell\">Due</div>\n                        </div>\n                    \n                        {taskTable}\n                        \n                </div>\n\n            </div>\n\n        )\n    }\n\n\n\n}\n","import React from 'react';\nimport Axios from 'axios';\nimport 'react-router-dom'\nimport TaskDisplay from './TaskDisplay';\nimport { AuthContext } from '../../Context/Authentication'\nimport { Redirect, withRouter } from 'react-router-dom';\nimport '../../form.css'\nimport { URL } from '../../App'\n\n\n\n\nclass CTForm extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            name: \"\",\n            description: \"\",\n            due: \"\",\n            selection: \"\",\n            editId: \"\",\n            taskCollection: [],\n            clickedTasks: [],\n            clickedTaskNames: [],\n            completedTasks: [],\n            clickedButtons: [],\n            unavailableTasks: [],\n            doneDelete: false,\n            selectedDelete: false,\n            tasksLoaded: false\n            \n        };\n\n        this.change = this.change.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.editMenu = this.editMenu.bind(this)\n        this.isClicked = this.isClicked.bind(this)\n        this.isCompleted = this.isCompleted.bind(this)\n        this.deleteOneTask = this.deleteOneTask.bind(this)\n        this.buttonClicked = this.buttonClicked.bind(this)\n        this.setDoneDelete = this.setDoneDelete.bind(this)\n        \n    }\n\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n\n    };\n\n    //Gets updated tasks from the server, filtered by user and list attributes assigned on creation\n    refreshTasks(){\n        Axios.get(`${URL}/tasks?user=${this.context.state.userLogged}&list=${this.context.state.activeList}&index=${this.context.state.listNum}`)\n        .then(res => {\n            console.log(this.context.state.listNum)\n            console.log(res.data)\n            this.setState({\n                 taskCollection: res.data,\n             });\n             this.setState({tasksLoaded: true})\n        })\n        .catch(function(error){\n            console.log(error);\n        })\n    }\n\n    //Posts a new task to the DB with user and list context values as attributes for filtering\n    onSubmit = (e) => {\n        e.preventDefault()\n        const task = {\n            name: this.state.name,\n            description: this.state.description,\n            due: this.state.due\n        }\n        Axios.post(`${URL}/tasks?user=${this.context.state.userLogged}&list=${this.context.state.activeList}`, task)\n        .then((res) => {\n            console.log(res.data)\n            this.setState({\n                name: \"\",\n                description: \"\",\n                due: \"\"\n            })\n            this.refreshTasks()\n        }).catch((error) => {\n            console.log(error)\n        });\n    }\n\n    //Refreshes Tasks on mount\n    componentDidMount = () => {\n        this.refreshTasks()\n    }\n    \n    //Sets state as the current value of the task to edit, to be passed as state on redirect to the update forms.\n    //Makes the fields filled with the current values of the list for easier editting.\n    editMenu(obj){\n        this.setState({\n            name: obj.name,\n            description: obj.description,\n            due: obj.due,\n            editId: obj.name\n        })\n        //Removes current name from the unavailable tasks to allow patching without changing the name.\n        this.state.unavailableTasks.splice(this.state.unavailableTasks.indexOf(obj.name), 1);\n        this.setState({ redirect: true})\n    }\n\n    //Creates an array of all tasks that are currently clicked to display css, and another to target for bulk delete of specific items.\n    //Bulk delete needs to work with names rather than ID, Mongo's Object(ID) method has strict rules preventing aggregate syntax.\n    //An array of names can be passed in mimicking perfect aggregate query syntax of endless length for specific deletions in bulk -\n    //- with one DeleteMany Request to the Database, duplicate protection on create ensures no unintended deletions.\n    isClicked(id){\n        let clicked = (this.state.clickedTasks.includes(id))\n       if(clicked === false){\n           this.state.clickedTasks.push(id)\n           return clicked === true\n\n       } else if(clicked === true){\n           this.state.clickedTasks.splice(this.state.clickedTasks.indexOf(id), 1);\n           return clicked === false\n       }\n    }\n\n    //Creates an array to track clicked buttons for delete confirmation\n    buttonClicked(id){\n        let clicked = (this.state.clickedButtons.includes(id))\n       //console.log(clicked)\n       if(clicked === false){\n           this.state.clickedButtons.push(id)\n           return clicked === true\n\n       } else if(clicked === true){\n           this.state.clickedButtons.splice(this.state.clickedButtons.indexOf(id), 1);\n           return clicked === false\n       }\n    }\n\n    //Patches a specific task to update its completed attribute, displaying greyed out css\n    //Primes task to be deleted with the other completed tasks in bulk\n    isCompleted(id){\n            if(this.state.completedTasks.includes(id)){\n                const task = \"false\"\n                Axios.patch(`${URL}/tasks-complete?user=${this.context.state.userLogged}&id=${id}&list=${this.context.state.activeList}&complete=${task}`)\n            .then((res) => {\n                this.state.completedTasks.splice(this.state.completedTasks.indexOf(id), 1);\n                this.refreshTasks()\n            }).catch((error) => {\n                console.log(error)\n            });\n      \n            } else {\n                const task = \"true\"\n                Axios.patch(`${URL}/tasks-complete?user=${this.context.state.userLogged}&id=${id}&list=${this.context.state.activeList}&complete=${task}`, task)\n            .then((res) => {\n                this.state.completedTasks.push(id)\n                this.refreshTasks()\n            }).catch((error) => {\n                console.log(error)\n            });\n    \n            }\n      \n    }\n\n    //Deletes a specific task by ID\n    deleteOneTask(id){\n        console.log(id)\n        Axios.delete(`${URL}/tasks?user=${this.context.state.userLogged}&id=${id}&list=${this.context.state.activeList}`)\n        .then(res => {\n            this.state.unavailableTasks.splice(0, this.state.unavailableTasks.length)\n            this.refreshTasks()\n            //console.log(res)\n        })\n        .catch(function(error){\n            console.log(error);\n        })\n    }\n\n    //Deletes all tasks in the list with completed: true attributes\n    deleteDoneTasks(){\n        Axios.delete(`${URL}/tasks-complete?user=${this.context.state.userLogged}&list=${this.context.state.activeList}`)\n        .then(res => {\n            console.log(res.data)\n            this.state.unavailableTasks.splice(0, this.state.unavailableTasks.length)\n            this.refreshTasks()\n        })\n        .catch(function(error){\n            console.log(error);\n        })\n    }\n\n    //Deletes all currently clicked tasks by sending an array of any length to be converted into aggregate query syntax.\n    //All specified tasks are deleted with one Mongo deleteMany function\n    deleteSelectedTasks(){\n        const names = this.state.clickedTasks\n            Axios.delete(`${URL}/tasks-selected?user=${this.context.state.userLogged}&list=${this.context.state.activeList}`, {\n                params: {\n                    names: names\n                }\n            })\n            .then(res => {\n                //Clears targeted tasks from the unavailable tasks array after deletion\n                this.state.unavailableTasks.splice(0, this.state.unavailableTasks.length)\n                this.refreshTasks()\n            })\n            .catch(function(error){\n                console.log(error);\n            })\n    }\n\n    //Triggers redirect to the list selection\n    goBack(){\n        this.setState({ back: true })\n    }\n\n    //Primes the button to delete all completed tasks after confirmation\n    setDoneDelete(){\n        if(this.state.doneDelete === false){\n            this.setState({ doneDelete: true})\n            return true\n        } else if(this.state.doneDelete === true){\n            this.setState({ doneDelete: false })\n            return false\n        }\n    }\n    \n    //Primes the button to delete all selected tasks after confirmation\n    setSelectedDelete(){\n        if(this.state.selectedDelete === false){\n            this.setState({ selectedDelete: true })\n            return true\n        } else if(this.state.selectedDelete === true){\n            this.setState({ selectedDelete: false })\n            return false\n        }\n    }\n\n    render () {\n\n        //Redirects to the edit list form, passing in the current list values to populate the fields for easier editting\n        if(this.state.redirect){\n        return (\n            <Redirect push={true} to={{\n                pathname: '/ETask',\n                state: { \n                    id: this.state.editId,\n                    name: this.state.name,\n                    description: this.state.description,\n                    due: this.state.due,\n                    unavailableTasks: this.state.unavailableTasks\n                }\n            }}/>\n        )\n        }\n\n        //Redirects back to the list selection\n        if(this.state.back){\n            return (\n                <Redirect push to={'/Select'}/>\n            )\n        }\n        \n        return(\n            <div>\n            <form>\n                <h3>Create New Task</h3>\n                <input\n                name=\"name\"\n                maxLength={30}\n                placeholder=\"Task Name\"\n                value={this.state.name}\n                onChange={e => this.change(e)}\n                />\n                {/* Displays message when the taskname is a duplicate in the same list */}\n                <p className={(this.state.unavailableTasks.includes(this.state.name)) ? \"shown-messages\" : \"hidden-messages\" }>No duplicate tasks in the same list</p>\n                <br/>\n                <input\n                name=\"description\"\n                maxLength={60}\n                placeholder=\"What to do\"\n                value={this.state.description}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <input\n                name=\"due\"\n                maxLength={30}\n                placeholder=\"When to have it done\"\n                value={this.state.due}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                {/* Prevents submission until the tasks are loaded to ensure duplicate names are known, and the input is valid */}\n                <button disabled={this.state.name.length === 0 || (this.state.unavailableTasks.includes(this.state.name)) || (this.state.tasksLoaded === false)} onClick={e => this.onSubmit(e)}>Add Task</button>\n                \n            </form>\n            <h2>{`${this.context.state.activeList}`}</h2>\n            <button type=\"button\" onClick={() => this.goBack()}>Back</button>\n\n            {/* Displays retrieved tasks filtered by userLogged and activeList context values */}\n            <TaskDisplay taskCollection={this.state.taskCollection} \n            editMenu={this.editMenu} isClicked={this.isClicked} \n            clickedTasks={this.state.clickedTasks} \n            isCompleted={this.isCompleted}\n            completedTasks={this.state.completedTasks}\n            deleteOneTask={this.deleteOneTask}\n            clickedButtons={this.state.clickedButtons}\n            buttonClicked={this.buttonClicked}\n            unavailableTasks={this.state.unavailableTasks}\n\n            />\n            <br/>\n            \n                {/* Primes completed task delete, revealing real button and a cancel option */}\n                <button \n                    onClick={() => this.setDoneDelete()} \n                    shown={this.state.doneDelete ? \"hidden\" : \"\"}\n                    >Delete Done Tasks</button> \n                \n                <button \n                    className=\"Clicked\"\n                    onClick={() => this.setDoneDelete()}\n                    shown={this.state.doneDelete ? \"show\" : \"hidden\"}\n                    >Cancel</button>\n                \n                {/* Primes selected task delete, revealing real button and a cancel option */}\n                <button\n                    onClick={() => this.setSelectedDelete()}\n                    shown={this.state.selectedDelete ? \"hidden\" : \"\"}\n                    >Delete Selected Tasks</button>\n\n                <button \n                    className=\"Clicked\"\n                    onClick={() => this.setSelectedDelete()}\n                    shown={this.state.selectedDelete ? \"show\" : \"hidden\"}\n                    >Cancel</button>\n               \n                \n\n            <br/>\n\n            {/* Deletes all completed tasks in the list */}\n            <button \n                    className=\"deletebutton\"\n                    onClick={() => this.deleteDoneTasks()}\n                    onClickCapture={() => this.setDoneDelete()}\n                    shown={this.state.doneDelete ? \"\" : \"hidden\"}\n                    >Delete Completed Tasks?</button>\n\n            {/* Deletes all selected tasks in the list */}\n            <button \n                    className=\"deletebutton\"\n                    onClick={() => this.deleteSelectedTasks()}\n                    onClickCapture={() => this.setSelectedDelete()}\n                    shown={this.state.selectedDelete ? \"\" : \"hidden\"}\n                    >Delete Selected Tasks?</button>\n\n                    <br/>\n            \n            </div>\n\n            \n\n        )\n        \n    }\n\n}\nexport default withRouter(CTForm)\nCTForm.contextType = AuthContext;","import React from 'react'\n//import { Link } from \"react-router-dom\";\n\nexport const Links = () => {\n    return(\n        <ul>\n              \n        </ul>\n    )\n}","import React from \"react\";\nimport {\n    Route,\n    Redirect\n} from \"react-router-dom\";\n\nimport { AuthContext } from '../../Context/Authentication'\n\n// A wrapper for Routes that redirects to the login screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n    return (\n        <AuthContext.Consumer>\n            {({isAuthenticated}) => (\n                    <Route\n                        {...rest}\n                        render={({ location }) =>\n                            isAuthenticated ? (\n                                children\n                            ) : (\n                                    <Redirect\n                                        to={{\n                                            pathname: \"/\",\n                                            state: { from: location }\n                                        }}\n                                    />\n                                )\n                        }\n                    />\n                )\n            }\n        </AuthContext.Consumer>\n        \n    );\n}\n\nexport default PrivateRoute","import React from 'react';\nimport Axios from 'axios';\nimport { AuthContext } from '../../Context/Authentication';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport { URL } from '../../App'\n\n\nclass CLForm extends React.Component{\n    state = {\n        listname: \"\",\n        desc: \"\",\n        due: \"\",\n\n        unavailableLists: []\n    }\n\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n    };\n    \n    //Post a new list with a user attribute, linking the list to the current account, then redirecting\n    onSubmit = e => {\n        e.preventDefault()\n\n        const list = {\n            listname: this.state.listname,\n            description: this.state.desc,\n            due: this.state.due,\n\n            tasks: []\n        }\n      \n        Axios.post(`${URL}/lists?user=${this.context.state.userLogged}`, list)\n        .then((res) => {\n            console.log(res.data)\n            this.setState({\n                listname: \"\",\n                desc: \"\",\n                due: \"\"\n            })\n            this.setState({ redirect: true })\n        }).catch((error) => {\n            console.log(error)\n        });\n\n        \n\n    }\n    \n    //Get the unavailable listnames to prevent duplicates\n    componentDidMount(){\n        this.setState({ unavailableLists: this.props.history.location.state.unavailableLists })\n    }\n\n    //Trigger redirect back to list selection\n    goBack(){\n        this.setState({ redirect: true })\n    }\n    \n    render () {\n        //Redirect to list select after a successful post, or by using the back button\n        if (this.state.redirect){\n            return (\n                <Redirect push to={'/Select'}/>\n            )\n        }\n\n        return(\n            <div>\n            <form>\n                <h3>Create New List</h3>\n                <input\n                name=\"listname\"\n                maxLength={30}\n                placeholder=\"List Name\"\n                value={this.state.listname}\n                onChange={e => this.change(e)}\n                />\n                {/* Displays a message when the name is a duplicate */}\n                <p className={(this.state.unavailableLists.includes(this.state.listname)) ? \"shown-messages\" : \"hidden-messages\" } >List names must be unique</p>\n                <br/>\n                <input\n                name=\"desc\"\n                maxLength={60}\n                placeholder=\"Type of List\"\n                value={this.state.desc}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <input\n                name=\"due\"\n                maxLength={30}\n                placeholder=\"Timeframe\"\n                value={this.state.due}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                {/* Disables button when the name is unavailable, preventing duplicates */}\n                <button disabled={(this.state.unavailableLists.includes(this.state.name)) ? true : false} \n                onClick={e => this.onSubmit(e)}\n                >Add List</button>\n                <br/>\n                <button type=\"button\" disabled={this.state.listname.length === 0 || this.state.unavailableLists.includes(this.state.listname)} onClick={() => this.goBack()}>Back</button>\n\n            </form>\n            </div>\n        )\n    }\n\n}\nexport default withRouter(CLForm);\nCLForm.contextType = AuthContext","import React from 'react';\nimport '../../form.css'\nimport Axios from 'axios'\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { URL } from '../../App'\n\n//onChange form validation, assigning CSS to fields with errors and determining if all fields are valid for submission.\nfunction validate(username, email, password, cpassword) {\n    return {\n        username: username.length === 0,\n        email: email.length === 0,\n        password: password.length === 0,\n        cpassword: cpassword !== password || cpassword.length === 0\n    }\n    \n}\n\nexport default class CUForm extends React.Component {\n    state = {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        cpassword: \"\",\n\n        touched: {\n            username: false, \n            email: false,\n            password: false,\n            cpassword: false,\n        },\n\n        unavailableUsers: [],\n        unavailableEmails: []\n    };\n\n    //Setting state with field values on  change\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n    };\n\n    //Allowing css to be applied only after a field has been touched\n    handleBlur = (field) => e => {\n        this.setState({\n          touched: { ...this.state.touched, [field]: true },\n        });\n      }\n\n    //Posting a new user to the DB\n    onSubmit = e => {\n        e.preventDefault()\n        const user = {\n            username: this.state.username,\n            email: this.state.email,\n            password: this.state.password,\n\n            lists: []\n        }\n        //Checking to see if username is available\n        Axios.get(`${URL}/users-names?username=${this.state.username}`)\n        .then(res => {\n            //if username is available, check email availability\n            if(res.data === true){\n            (Axios.get(`${URL}/users-emails?email=${this.state.email}`)\n            .then((res) => {\n                //if email is available, post new user\n                if(res.data === true){\n                    console.log(`Email ${this.state.email} Available`)\n                    Axios.post(`${URL}/users`, user)\n                    .then((res) => {\n                        console.log(res.data)\n                    }).catch((error) => {\n                        console.log(error)\n                    });\n                    //Clearing forms\n                    this.setState({\n                        username: \"\",\n                        email: \"\",\n                        password: \"\",\n                        cpassword: \"\",\n    \n                        touched: {\n                            username: false,  \n                            email: false,\n                            password: false,\n                            cpassword: false,\n                        }\n    \n                    })\n                    //Trigger redirect to sign-in form\n                    this.setState({ redirect: true})\n                    //if email is unavailable, push email to array of unavailable emails to check onChange\n                } else if(res.data === false){\n                    this.state.unavailableEmails.push(this.state.email)\n                    this.setState({email: this.state.email})\n                    console.log(`Email ${this.state.email} is already in use`)\n                }\n            }).catch((error) => {\n                console.log(error)\n            }))\n             \n            //if username is unavailable, push username to array of unavailable names to check onChange\n            } else if(res.data === false){\n                this.state.unavailableUsers.push(this.state.username)\n                this.setState({username: this.state.username})\n                console.log(`Username ${this.state.username} is unavailable`)\n            }\n        }) \n        .catch(function(error){\n            console.log(error);\n        })\n\n    }\n\n    render(){\n        //Redirects to sign-in after successful user creation\n        if (this.state.redirect) {\n            return <Redirect push to={ '/' }/>\n          }\n        \n        //Checks if each field has valid entries\n        var errors = validate(this.state.username, this.state.email, this.state.password, this.state.cpassword);        \n        const isEnabled = !Object.keys(errors).some(x => errors[x]);\n        \n        //Checks if error css should be shown\n        const showErr = (field) => {\n            const hasError = errors[field];\n            const shouldShow = this.state.touched[field];\n      \n            return hasError ? shouldShow : false;\n          };\n\n        //Checks if good css should be shown\n          const showValid = (field) => {\n            const shouldShow = this.state.touched[field];\n\n            return shouldShow ? true : false\n            \n          };\n          \n        return (\n            <div>\n            <form>\n                <h3>New User Registration</h3>\n                <input \n                name=\"username\" \n                maxLength={30}\n                className={showErr('username') ? \"error\" : \"\"}\n                filled={showValid('username') ? \"good\" : \"\"}\n                taken={this.state.unavailableUsers.includes(this.state.username) ? \"true\" : \"\"}\n                onBlur={this.handleBlur('username')}\n                placeholder=\"Username\"\n                value={this.state.username} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={this.state.unavailableUsers.includes(this.state.username) ? \"shown-messages\" : \"hidden-messages\"}> Username unavailable</p>\n                <p className={showErr('username') ? \"shown-messages\" : \"hidden-messages\"}> Enter Username</p>\n                <br/>\n                <input \n                name=\"email\"\n                maxLength={30}\n                className={showErr('email') ? \"error\" : \"\"}\n                filled={showValid('email') ? \"good\" : \"\"}\n                taken={this.state.unavailableEmails.includes(this.state.email) ? \"true\" : \"\"}\n                onBlur={this.handleBlur('email')}\n                placeholder=\"Email Address\" \n                value={this.state.email} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={this.state.unavailableEmails.includes(this.state.email) ? \"shown-messages\" : \"hidden-messages\"}> Email already in use, try Signing In</p>\n                <p className={showErr('email') ? \"shown-messages\" : \"hidden-messages\"}> Enter a valid Email address</p>\n                <br/>\n                <input \n                name=\"password\"\n                maxLength={30}\n                className={showErr('password') ? \"error\" : \"\"}\n                filled={showValid('password') ? \"good\" : \"\"}\n                onBlur={this.handleBlur('password')}\n                placeholder=\"Password\"\n                type=\"password\" \n                value={this.state.password} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={showErr('password') ? \"shown-messages\" : \"hidden-messages\"}>Enter a good password</p>\n                <br/>\n                <input \n                name=\"cpassword\"\n                maxLength={30}\n                className={showErr('cpassword') ? \"error\" : \"\"}\n                filled={showValid('cpassword') ? \"good\" : \"\"}\n                onBlur={this.handleBlur('cpassword')}\n                placeholder=\"Confirm Password\"\n                type=\"password\" \n                value={this.state.cpassword} \n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <p className={showErr('cpassword') ? \"shown-messages\" : \"hidden-messages\"}>Passwords must match</p>\n                <br/>\n                <p className={isEnabled ? \"shown-messages\" : \"hidden-messages\"}>Ready to submit</p>\n                <br/>\n                <button disabled={!isEnabled} onClick={e => this.onSubmit(e)}>Create Account</button>\n                \n            </form>\n            <p>Already have an account?</p><Link to=\"/\">Sign-in</Link>\n            </div>\n            \n        )\n    }\n}","import React, { Component } from 'react';\n\n\n\n\nclass ListTable extends Component {\n    state = {\n        clickedLists: [],\n        clickedButtons: [],\n        unavailableLists: []\n    }\n    \n    //Checks if each row has been clicked\n    checkClicked(id){\n        let bool = (this.state.clickedLists.includes(id))\n        return bool\n    }\n\n    //Checks if a delete is ready to be confirmed\n    checkDeletable(id){\n        let bool = (this.state.clickedButtons.includes(id))\n        return bool\n    }\n\n    //Sends the names of each row on mount, creating the array of unavailable list names\n    componentDidMount(){\n        this.props.unavailableLists.push(this.props.obj.listname)\n        this.setState({ unavailableLists: this.props.unavailableLists})\n    }   \n\n    render() {\n        const index = this.props.index\n        const id = this.props.obj.listname\n\n        return (\n            \n            <div \n            shape=\"rTableRow\"\n            onClick={() => this.props.isClicked(id)}\n            onClickCapture={() => this.setState({clickedLists: this.props.clickedLists})}\n            className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"} \n            deletable={(this.checkDeletable(id)) ? \"true\" : \"false\"}\n            > \n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}>\n                    {this.props.obj.listname}\n                </div>\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}>\n                    {this.props.obj.description}\n                </div>\n                <div \n                shape=\"rTableCell\"\n                className={(this.checkClicked(id)) ? \"rowClicked\" : \"rowNotClicked\"}>\n                    {this.props.obj.due}\n                </div>\n            <div>\n                <div\n                shape=\"rTableCell\">\n                    <button \n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"} \n                    onClick={() => this.props.clickHandler(id, index)}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Select</button>\n\n                    <button \n                    className=\"deletebutton\"\n                    onClick={() => this.props.deleteOneList(id)}\n                    shown={(this.checkDeletable(id)) ? \"\" : \"hidden\"}\n                    >Delete List?</button>\n                \n                </div>\n                <div\n                shape=\"rTableCell\">\n                    <button className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"} \n                    onClick={() => this.props.editMenu(this.props.obj, index)}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Edit</button>\n\n                    <button \n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"\"}\n                    onClick={() => this.props.buttonClicked(id)}\n                    shown={(this.checkDeletable(id)) ? \"show\" : \"hidden\"}\n                    >Cancel</button>\n                </div>\n                </div>\n                <div\n                shape=\"rTableCell\">    \n                    <button \n                    onClick={() => this.props.buttonClicked(id)} \n                    onClickCapture={() => this.setState({clickedButtons: this.props.clickedButtons})}\n                    className={(this.checkClicked(id)) ? \"Clicked\" : \"notClicked\"}\n                    shown={(this.checkDeletable(id)) ? \"hidden\" : \"\"}\n                    >Delete</button> \n                    \n                </div>\n            </div>\n            \n        );\n    }\n    \n}\n\nexport default ListTable;","import React, { Component } from 'react';\nimport ListTable from './ListTable'\n\nexport default class ListDisplay extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = { \n            clickedLists: [],\n            clickedButtons: []\n        \n        };\n    }\n\n    //Maps the listCollection to allow data elements to fit nicely into a div table.\n    listTable = () => {\n        return this.props.listCollection.map((data, i) => {\n            return <ListTable obj={data} key={i} index={i} clickHandler={this.props.clickHandler} \n            editMenu={this.props.editMenu} \n            isClicked={this.props.isClicked} clickedLists={this.props.clickedLists} \n            deleteOneList={this.props.deleteOneList}\n            clickedButtons={this.props.clickedButtons} buttonClicked={this.props.buttonClicked}\n            unavailableLists={this.props.unavailableLists} />;\n        });\n    }\n\n\n    render(){\n        const listTable = this.listTable()\n        \n        return(\n            <div className=\"tableDisplay\">\n                <div shape=\"rTable\">\n                        <div shape=\"rTableRow\">\n                            <div shape=\"rTableCell\">Name</div>\n                            <div shape=\"rTableCell\">Description</div>\n                            <div shape=\"rTableCell\">Due</div>\n                        </div>\n                    \n                        {listTable}\n                        \n                </div>\n            </div>\n            \n\n        )\n    }\n\n}\n","import React, { Component } from 'react';\nimport ListDisplay from './Lists/ListDisplay';\nimport Axios from 'axios'\nimport { Redirect } from 'react-router';\nimport {AuthContext} from '../Context/Authentication'\nimport '../App.css'\nimport {URL} from '../App'\n\nexport default class SelectList extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      selection: \"\",\n      listNumber: \"\",\n      listCollection: [],\n      clickedLists: [],\n      clickedButtons: [],\n      unavailableLists: [],\n      editId: \"\",\n      listsLoaded: false\n      \n    }\n\n\n    this.clickHandler = this.clickHandler.bind(this)\n    this.isClicked = this.isClicked.bind(this)\n    this.deleteOneList = this.deleteOneList.bind(this)\n    this.buttonClicked = this.buttonClicked.bind(this)\n    this.editMenu = this.editMenu.bind(this)\n\n  }\n\n\n  //Gets current lists from the DB, filtered by the current userLogged\n  refreshLists = () => {\n    const user = this.context.state.userLogged\n    Axios.get(`${URL}/lists?user=${user}`)\n        .then(res => {\n            console.log(res.data)\n            this.setState({ listCollection: res.data,\n            listsLoaded: true })\n\n        })\n        .catch(function(error){\n            console.log(error)\n        })\n  }\n\n  //Refreshes to grab current lists on mount\n  componentDidMount(){\n  this.refreshLists()\n  }\n\n  //Stores a clicked state for each list to display the CSS and the menu\n  isClicked(id){\n    let clicked = (this.state.clickedLists.includes(id))\n    if(clicked === false){\n        this.state.clickedLists.push(id)\n        return clicked === true\n\n    } else if(clicked === true){\n        this.state.clickedLists.splice(this.state.clickedLists.indexOf(id), 1);\n        return clicked === false\n    }\n  }\n\n  //stores a clicked state for buttons\n  buttonClicked(id){\n    let clicked = (this.state.clickedButtons.includes(id))\n    if(clicked === false){\n        this.state.clickedButtons.push(id)\n        return clicked === true\n\n    } else if(clicked === true){\n        this.state.clickedButtons.splice(this.state.clickedButtons.indexOf(id), 1);\n        return clicked === false\n    }\n  }\n\n  //Selects a list, setting the name as the current selection and triggering a redirect\n  clickHandler(name, pos) {\n    console.log(name)\n    this.setState({ selection: name });\n    this.setState({ listNumber: pos})\n    this.setState({ redirect: true });\n  }\n\n  //triggers a redirect to the create list form\n  addlist(){\n    this.setState({ redirect2: true })\n    \n  }\n\n  //Deletes a list by ID, and all tasks with that list attribute\n  deleteOneList(id){\n    console.log(id)\n    Axios.delete(`${URL}/lists?user=${this.context.state.userLogged}&list=${id}`)\n    .then(res => {\n      //Removes this listname from the unavailable lists for duplicate protection.\n        this.state.unavailableLists.splice(this.state.unavailableLists.indexOf(id), 1);\n        this.refreshLists()\n    })\n    .catch(function(error){\n        console.log(error);\n    })\n  }\n\n//Sets state as the current value of the list to edit, to be passed as state on redirect to the update forms.\n//Makes the fields filled with the current values of the list for easier editting.\n  editMenu(obj, index){\n        this.setState({\n            listname: obj.listname,\n            description: obj.description,\n            due: obj.due,\n            editId: index\n        })\n        //Removes current name from the unavailable lists to allow patching without changing the name.\n        this.state.unavailableLists.splice(this.state.unavailableLists.indexOf(obj.listname), 1);\n        this.setState({ redirect3: true})\n  }\n\n  render() {\n\n    //Redirects to task display, setting the context activeList value to filter for relevant tasks,\n    //resetting the userLogged context value as it's current value to prevent the logged state from being cleared\n    if (this.state.redirect) {\n      console.log(this.state.selection)\n        return(\n          <AuthContext.Consumer>\n            {({identify}) => (\n                <Redirect push={identify(this.context.state.userLogged, this.state.selection, this.state.listNumber)} to={'/CTForm'}/>\n            )}\n          </AuthContext.Consumer>\n          \n        )\n    }\n\n    //Redirects to the create list form, passing in the currently used names as unavailable to prevent duplicates\n    if (this.state.redirect2){\n        return (\n          <Redirect push={true} to={{\n            pathname: '/CLForm',\n            state: {\n              unavailableLists: this.state.unavailableLists\n            }\n          }}/>\n        )\n    }\n\n    //Redirects to the edit list form, passing in the current list values to populate the fields for easier editting.\n    if(this.state.redirect3){\n        return (\n          <Redirect push={true} to={{\n            pathname: '/EList',\n            state: {\n              id: this.state.listname,\n              listname: this.state.listname,\n              description: this.state.description,\n              due: this.state.due,\n              unavailableLists: this.state.unavailableLists\n            }\n          }}/>\n        )\n    }\n\n    return (\n      <div>\n        {/* Forces the add list button to wait until the current lists are retrieved from the database,\n        ensuring the unavailable list names can be sent to the create form, preventing duplicates. */}\n        <button disabled={this.state.listsLoaded ? false : true} onClick={() => this.addlist()}>Create New List</button>\n        \n        {/* Displays the retrieved lists filtered by the userLogged context. */}\n        <ListDisplay listCollection={this.state.listCollection} clickHandler={this.clickHandler} \n        editMenu={this.editMenu} \n        isClicked={this.isClicked} clickedLists={this.state.clickedLists} \n        deleteOneList={this.deleteOneList}\n        clickedButtons={this.state.clickedButtons} buttonClicked={this.buttonClicked}\n        unavailableLists={this.state.unavailableLists} />\n        \n      </div>\n    );\n    }\n  }\n\nSelectList.contextType = AuthContext;\n","import React from 'react';\nimport Axios from 'axios';\nimport 'react-router-dom'\nimport { AuthContext } from '../../Context/Authentication'\nimport { withRouter, Redirect } from 'react-router-dom';\nimport { URL } from '../../App'\n\n\n\nclass ETask extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            name: \"\",\n            description: \"\",\n            due: \"\",\n            selection: \"\",\n            taskCollection: [],\n            unavailableTasks: []\n        };\n\n        this.change = this.change.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        \n    }\n\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n\n    };\n\n    //Patches the selected task, then redirects to task display\n    onSubmit = (e) => {\n        e.preventDefault()\n        const user = this.context.state.userLogged\n        const id = this.props.history.location.state.id\n        const listname = this.context.state.activeList\n        const task = {\n            name: this.state.name,\n            description: this.state.description,\n            due: this.state.due\n        }\n        Axios.patch(`${URL}/tasks?user=${user}&id=${id}&list=${listname}`, task)\n        .then((res) => {\n            this.setState({\n                name: \"\",\n                desc: \"\",\n                due: \"\"\n            })\n            this.setState({redirect: true})\n        }).catch((error) => {\n            console.log(error)\n        });\n    }\n\n    //Retrieves previous value of task fields for easier editting, as well as unavailable task names.\n    componentDidMount(){\n        this.setState({\n            name: this.props.history.location.state.name,\n            description: this.props.history.location.state.description,\n            due: this.props.history.location.state.due,\n            unavailableTasks: this.props.history.location.state.unavailableTasks\n        })\n    }\n\n    //Triggers redirect to task display\n    goBack(){\n        this.setState({ redirect: true })\n    }\n    \n    render () {\n\n        //Redirects to the create task form and the task display\n        if(this.state.redirect){\n            return (\n                <Redirect push to={'/CTForm'}/>\n            )\n        }\n        \n        return(\n            <div>\n            <form>\n                <h3>Edit Task</h3>\n                <input\n                name=\"name\"\n                maxLength={30}\n                placeholder=\"Task Name\"\n                value={this.state.name}\n                onChange={e => this.change(e)}\n                />\n                {/* Shows message when a task name is a duplicate in the same list */}\n                <p className={(this.state.unavailableTasks.includes(this.state.name)) ? \"shown-messages\" : \"hidden-messages\" } > Task names must be unique</p>\n                <br/>\n                <input\n                name=\"description\"\n                maxLength={60}\n                placeholder=\"What to do\"\n                value={this.state.description}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <input\n                name=\"due\"\n                maxLength={30}\n                placeholder=\"When to have it done\"\n                value={this.state.due}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                {/* Prevents submission unless the task name is unique in the list */}\n                <button disabled={this.state.name.length === 0 || (this.state.unavailableTasks.includes(this.state.name))} onClick={e => this.onSubmit(e)}>Update Task</button>\n                <br/>\n                <button type=\"button\" disabled={(this.state.unavailableTasks.includes(this.state.name)) ? true : false} onClick={() => this.goBack()}>Back</button>\n\n\n                \n            </form>\n          \n            </div>\n        )\n        \n    }\n\n}\n\nexport default withRouter(ETask);\nETask.contextType = AuthContext;","import React from 'react';\nimport Axios from 'axios';\nimport 'react-router-dom'\nimport { AuthContext } from '../../Context/Authentication'\nimport { withRouter, Redirect } from 'react-router-dom';\nimport '../../form.css'\nimport { URL } from '../../App'\n\n\n\nclass EList extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            listname: \"\",\n            description: \"\",\n            due: \"\",\n            selection: \"\",\n            unavailableLists: [],\n            taskCollection: []\n        };\n\n        this.change = this.change.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        \n    }\n\n    change = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        })\n\n    };\n\n    //Patches the list, as well as all tasks with the list attribute so they maintain their association.\n    onSubmit = e => {\n        e.preventDefault()\n        const user = this.context.state.userLogged\n        const name = this.props.history.location.state.listname\n\n        const list = {\n            listname: this.state.listname,\n            description: this.state.description,\n            due: this.state.due,\n        }\n        //Patch request for the list\n        Axios.patch(`${URL}/lists?user=${user}&id=${name}`, list)\n        .then((res) => {\n            this.setState({\n                listname: \"\",\n                desc: \"\",\n                due: \"\"\n            })\n            this.setState({redirect: true})\n        }).catch((error) => {\n            console.log(error)\n        });\n    }\n\n    //Retrieving current values of the list to populate the fields for easier editting\n    componentDidMount(){\n        this.setState({\n            listname: this.props.history.location.state.listname,\n            description: this.props.history.location.state.description,\n            due: this.props.history.location.state.due,\n            unavailableLists: this.props.history.location.state.unavailableLists\n        })\n    }\n\n    //Trigger Redirect Back to list selection\n    goBack(){\n        this.setState({ redirect: true })\n    }\n    \n    render () {\n\n        if(this.state.redirect){\n            return (\n                <Redirect push to={'/Select'}/>\n            )\n        }\n        \n        return(\n            <div>\n            <form>\n                <h3>Edit List</h3>\n                <input\n                name=\"listname\"\n                maxLength={30}\n                placeholder=\"List Name\"\n                value={this.state.listname}\n                onChange={e => this.change(e)}\n                />\n                {/* Displays message when the name is a duplicate */}\n                <p className={(this.state.unavailableLists.includes(this.state.listname)) ? \"shown-messages\" : \"hidden-messages\" } > List names must be unique</p>\n                <br/>\n                <input\n                name=\"description\"\n                maxLength={60}\n                placeholder=\"What to do\"\n                value={this.state.description}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <input\n                name=\"due\"\n                maxLength={30}\n                placeholder=\"When to have it done\"\n                value={this.state.due}\n                onChange={e => this.change(e)}\n                />\n                <br/>\n                <button disabled={this.state.listname.length === 0 || this.state.unavailableLists.includes(this.state.listname)} onClick={e => this.onSubmit(e)}>Update List</button>\n                <br/>\n                <button type=\"button\" onClick={() => this.goBack()}>Back</button>\n\n\n                \n            </form>\n          \n            </div>\n        )\n        \n    }\n\n}\n\nexport default withRouter(EList);\nEList.contextType = AuthContext;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport PrivateRoute from './PrivateRoutes'\nimport CTForm from '../Tasks/CreateTaskForm'\nimport CLForm from '../Lists/CreateListForm'\nimport CUForm from '../Users/CreateUserForm'\nimport SIForm from '../Users/SignInForm'\nimport SelectList from '../SelectList'\nimport EditTask from '../Tasks/EditTask'\nimport EditList from '../Lists/EditList'\n// import COForm from '../Users/CreateObjectForm'\n\nexport const Routes = () => {\n    return (  \n          \n        <div>\n          <Switch>\n          <Route exact path=\"/\">\n            <SIForm/>\n          </Route>\n          <PrivateRoute path=\"/CTForm\">\n            <CTForm />\n          </PrivateRoute>\n          <PrivateRoute path=\"/CLForm\">\n            <CLForm />\n          </PrivateRoute>\n          <Route path=\"/CUForm\">\n            <CUForm />\n          </Route>\n          <PrivateRoute path=\"/Select\">\n            <SelectList />\n          </PrivateRoute>\n          <PrivateRoute path=\"/ETask\">\n            <EditTask />\n          </PrivateRoute>\n          <PrivateRoute path=\"/EList\">\n            <EditList />\n          </PrivateRoute>\n          </Switch>\n        </div>\n    )\n  }\n  ","import React from 'react'\nimport { Routes } from '../Components/Navigation/Routes'\n\nexport default () => {\n    return (\n        <div>\n            <Routes/>\n        </div>\n    )\n}","import React, { useContext } from 'react'\n\nimport { AuthContext } from '../../Context/Authentication'\n \nfunction SignOut() {\n    let context = useContext(AuthContext)\n\n    return context.isAuthenticated ? (\n            <button\n                onClick={() => {\n                    context.signout()\n                }}\n            >\n                Sign out\n      </button>\n    ) : (\n            <p>Sign in to view lists</p>\n        )\n}\n\nexport default SignOut;","import React, { useState } from 'react';\nimport './App.css';\nimport './form.css';\nimport './Components/Users/SignInForm';\nimport './Components/Tasks/CreateTaskForm'\nimport { Links } from './Components/Navigation/Links'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { AuthContext } from './Context/Authentication'\n\nimport Main from './Pages/index'\nimport SignOut from './Components/Navigation/SignOut';\n\n//URL for API\nexport const URL = 'https://to-do-list-api-remastered.herokuapp.com'\n// export const URL = 'http://localhost:3306'\n\nfunction App(){\n  const [isAuthenticated, setAuthenticated] = useState(false)\n  const [state, setState] = useState({\n    userLogged: \"\",\n    activeList: \"\",\n    listNum: \"\"\n})\n\n//Provides the logged in state\n  const authenticate = (id) => {\n    setAuthenticated(true)\n    setState({ userLogged: id })\n  }\n\n  const signout = () => {\n    setAuthenticated(false)\n  }\n\n  //Sets the userlogged context value and the activeList context Value for data filtering.\n  const identify = (user, list, pos) => {\n    console.log(user)\n    console.log(list)\n    console.log(pos)\n    setState({ userLogged: user, activeList: list, listNum: pos })\n  }\n  \n  \n\n  const store = {\n    isAuthenticated,\n    state,\n    authenticate,\n    signout,\n    identify\n  }\n\n\n  return (\n    <div className=\"App\">\n      \n      <AuthContext.Provider value={store}>\n            <Router>\n            <SignOut/>\n            <Links />\n            <Main/>\n            </Router> \n      </AuthContext.Provider>\n    </div>\n  );\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\n\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}